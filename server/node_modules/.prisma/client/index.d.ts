
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Video
 * 
 */
export type Video = $Result.DefaultSelection<Prisma.$VideoPayload>
/**
 * Model UserVideo
 * 
 */
export type UserVideo = $Result.DefaultSelection<Prisma.$UserVideoPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model UserComment
 * 
 */
export type UserComment = $Result.DefaultSelection<Prisma.$UserCommentPayload>
/**
 * Model UserLike
 * 
 */
export type UserLike = $Result.DefaultSelection<Prisma.$UserLikePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.video`: Exposes CRUD operations for the **Video** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Videos
    * const videos = await prisma.video.findMany()
    * ```
    */
  get video(): Prisma.VideoDelegate<ExtArgs>;

  /**
   * `prisma.userVideo`: Exposes CRUD operations for the **UserVideo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserVideos
    * const userVideos = await prisma.userVideo.findMany()
    * ```
    */
  get userVideo(): Prisma.UserVideoDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.userComment`: Exposes CRUD operations for the **UserComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserComments
    * const userComments = await prisma.userComment.findMany()
    * ```
    */
  get userComment(): Prisma.UserCommentDelegate<ExtArgs>;

  /**
   * `prisma.userLike`: Exposes CRUD operations for the **UserLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLikes
    * const userLikes = await prisma.userLike.findMany()
    * ```
    */
  get userLike(): Prisma.UserLikeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Video: 'Video',
    UserVideo: 'UserVideo',
    Comment: 'Comment',
    UserComment: 'UserComment',
    UserLike: 'UserLike'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "video" | "userVideo" | "comment" | "userComment" | "userLike"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Video: {
        payload: Prisma.$VideoPayload<ExtArgs>
        fields: Prisma.VideoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VideoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VideoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findFirst: {
            args: Prisma.VideoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VideoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findMany: {
            args: Prisma.VideoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          create: {
            args: Prisma.VideoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          createMany: {
            args: Prisma.VideoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VideoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          delete: {
            args: Prisma.VideoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          update: {
            args: Prisma.VideoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          deleteMany: {
            args: Prisma.VideoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VideoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VideoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          aggregate: {
            args: Prisma.VideoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVideo>
          }
          groupBy: {
            args: Prisma.VideoGroupByArgs<ExtArgs>
            result: $Utils.Optional<VideoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VideoCountArgs<ExtArgs>
            result: $Utils.Optional<VideoCountAggregateOutputType> | number
          }
        }
      }
      UserVideo: {
        payload: Prisma.$UserVideoPayload<ExtArgs>
        fields: Prisma.UserVideoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserVideoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVideoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserVideoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVideoPayload>
          }
          findFirst: {
            args: Prisma.UserVideoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVideoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserVideoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVideoPayload>
          }
          findMany: {
            args: Prisma.UserVideoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVideoPayload>[]
          }
          create: {
            args: Prisma.UserVideoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVideoPayload>
          }
          createMany: {
            args: Prisma.UserVideoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserVideoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVideoPayload>[]
          }
          delete: {
            args: Prisma.UserVideoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVideoPayload>
          }
          update: {
            args: Prisma.UserVideoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVideoPayload>
          }
          deleteMany: {
            args: Prisma.UserVideoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserVideoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserVideoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVideoPayload>
          }
          aggregate: {
            args: Prisma.UserVideoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserVideo>
          }
          groupBy: {
            args: Prisma.UserVideoGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserVideoGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserVideoCountArgs<ExtArgs>
            result: $Utils.Optional<UserVideoCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      UserComment: {
        payload: Prisma.$UserCommentPayload<ExtArgs>
        fields: Prisma.UserCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommentPayload>
          }
          findFirst: {
            args: Prisma.UserCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommentPayload>
          }
          findMany: {
            args: Prisma.UserCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommentPayload>[]
          }
          create: {
            args: Prisma.UserCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommentPayload>
          }
          createMany: {
            args: Prisma.UserCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommentPayload>[]
          }
          delete: {
            args: Prisma.UserCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommentPayload>
          }
          update: {
            args: Prisma.UserCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommentPayload>
          }
          deleteMany: {
            args: Prisma.UserCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommentPayload>
          }
          aggregate: {
            args: Prisma.UserCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserComment>
          }
          groupBy: {
            args: Prisma.UserCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCommentCountArgs<ExtArgs>
            result: $Utils.Optional<UserCommentCountAggregateOutputType> | number
          }
        }
      }
      UserLike: {
        payload: Prisma.$UserLikePayload<ExtArgs>
        fields: Prisma.UserLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikePayload>
          }
          findFirst: {
            args: Prisma.UserLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikePayload>
          }
          findMany: {
            args: Prisma.UserLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikePayload>[]
          }
          create: {
            args: Prisma.UserLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikePayload>
          }
          createMany: {
            args: Prisma.UserLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikePayload>[]
          }
          delete: {
            args: Prisma.UserLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikePayload>
          }
          update: {
            args: Prisma.UserLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikePayload>
          }
          deleteMany: {
            args: Prisma.UserLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikePayload>
          }
          aggregate: {
            args: Prisma.UserLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLike>
          }
          groupBy: {
            args: Prisma.UserLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLikeCountArgs<ExtArgs>
            result: $Utils.Optional<UserLikeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    userVideos: number
    userComment: number
    userLike: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userVideos?: boolean | UserCountOutputTypeCountUserVideosArgs
    userComment?: boolean | UserCountOutputTypeCountUserCommentArgs
    userLike?: boolean | UserCountOutputTypeCountUserLikeArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserVideosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserVideoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLikeWhereInput
  }


  /**
   * Count Type VideoCountOutputType
   */

  export type VideoCountOutputType = {
    userVideos: number
    userComment: number
    userLike: number
  }

  export type VideoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userVideos?: boolean | VideoCountOutputTypeCountUserVideosArgs
    userComment?: boolean | VideoCountOutputTypeCountUserCommentArgs
    userLike?: boolean | VideoCountOutputTypeCountUserLikeArgs
  }

  // Custom InputTypes
  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoCountOutputType
     */
    select?: VideoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeCountUserVideosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserVideoWhereInput
  }

  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeCountUserCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCommentWhereInput
  }

  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeCountUserLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLikeWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    userComment: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userComment?: boolean | CommentCountOutputTypeCountUserCommentArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountUserCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCommentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    fullName: string | null
    email: string | null
    password: string | null
    profileUrl: string | null
    imagePublicId: string | null
    refreshToken: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    fullName: string | null
    email: string | null
    password: string | null
    profileUrl: string | null
    imagePublicId: string | null
    refreshToken: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    password: number
    profileUrl: number
    imagePublicId: number
    refreshToken: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    profileUrl?: true
    imagePublicId?: true
    refreshToken?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    profileUrl?: true
    imagePublicId?: true
    refreshToken?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    profileUrl?: true
    imagePublicId?: true
    refreshToken?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    fullName: string
    email: string
    password: string
    profileUrl: string | null
    imagePublicId: string | null
    refreshToken: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    profileUrl?: boolean
    imagePublicId?: boolean
    refreshToken?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userVideos?: boolean | User$userVideosArgs<ExtArgs>
    userComment?: boolean | User$userCommentArgs<ExtArgs>
    userLike?: boolean | User$userLikeArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    profileUrl?: boolean
    imagePublicId?: boolean
    refreshToken?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    profileUrl?: boolean
    imagePublicId?: boolean
    refreshToken?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userVideos?: boolean | User$userVideosArgs<ExtArgs>
    userComment?: boolean | User$userCommentArgs<ExtArgs>
    userLike?: boolean | User$userLikeArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      userVideos: Prisma.$UserVideoPayload<ExtArgs>[]
      userComment: Prisma.$UserCommentPayload<ExtArgs>[]
      userLike: Prisma.$UserLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fullName: string
      email: string
      password: string
      profileUrl: string | null
      imagePublicId: string | null
      refreshToken: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userVideos<T extends User$userVideosArgs<ExtArgs> = {}>(args?: Subset<T, User$userVideosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "findMany"> | Null>
    userComment<T extends User$userCommentArgs<ExtArgs> = {}>(args?: Subset<T, User$userCommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "findMany"> | Null>
    userLike<T extends User$userLikeArgs<ExtArgs> = {}>(args?: Subset<T, User$userLikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly profileUrl: FieldRef<"User", 'String'>
    readonly imagePublicId: FieldRef<"User", 'String'>
    readonly refreshToken: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.userVideos
   */
  export type User$userVideosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
    where?: UserVideoWhereInput
    orderBy?: UserVideoOrderByWithRelationInput | UserVideoOrderByWithRelationInput[]
    cursor?: UserVideoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserVideoScalarFieldEnum | UserVideoScalarFieldEnum[]
  }

  /**
   * User.userComment
   */
  export type User$userCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    where?: UserCommentWhereInput
    orderBy?: UserCommentOrderByWithRelationInput | UserCommentOrderByWithRelationInput[]
    cursor?: UserCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCommentScalarFieldEnum | UserCommentScalarFieldEnum[]
  }

  /**
   * User.userLike
   */
  export type User$userLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
    where?: UserLikeWhereInput
    orderBy?: UserLikeOrderByWithRelationInput | UserLikeOrderByWithRelationInput[]
    cursor?: UserLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLikeScalarFieldEnum | UserLikeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Video
   */

  export type AggregateVideo = {
    _count: VideoCountAggregateOutputType | null
    _avg: VideoAvgAggregateOutputType | null
    _sum: VideoSumAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  export type VideoAvgAggregateOutputType = {
    id: number | null
    duration: number | null
    views: number | null
    likes: number | null
  }

  export type VideoSumAggregateOutputType = {
    id: number | null
    duration: number | null
    views: number | null
    likes: number | null
  }

  export type VideoMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    playbackUrl: string | null
    videoPublicId: string | null
    duration: number | null
    views: number | null
    likes: number | null
    thumbnailUrl: string | null
    isPublished: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VideoMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    playbackUrl: string | null
    videoPublicId: string | null
    duration: number | null
    views: number | null
    likes: number | null
    thumbnailUrl: string | null
    isPublished: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VideoCountAggregateOutputType = {
    id: number
    title: number
    description: number
    playbackUrl: number
    videoPublicId: number
    duration: number
    views: number
    likes: number
    thumbnailUrl: number
    isPublished: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VideoAvgAggregateInputType = {
    id?: true
    duration?: true
    views?: true
    likes?: true
  }

  export type VideoSumAggregateInputType = {
    id?: true
    duration?: true
    views?: true
    likes?: true
  }

  export type VideoMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    playbackUrl?: true
    videoPublicId?: true
    duration?: true
    views?: true
    likes?: true
    thumbnailUrl?: true
    isPublished?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VideoMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    playbackUrl?: true
    videoPublicId?: true
    duration?: true
    views?: true
    likes?: true
    thumbnailUrl?: true
    isPublished?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VideoCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    playbackUrl?: true
    videoPublicId?: true
    duration?: true
    views?: true
    likes?: true
    thumbnailUrl?: true
    isPublished?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VideoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Video to aggregate.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Videos
    **/
    _count?: true | VideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VideoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VideoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoMaxAggregateInputType
  }

  export type GetVideoAggregateType<T extends VideoAggregateArgs> = {
        [P in keyof T & keyof AggregateVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideo[P]>
      : GetScalarType<T[P], AggregateVideo[P]>
  }




  export type VideoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
    orderBy?: VideoOrderByWithAggregationInput | VideoOrderByWithAggregationInput[]
    by: VideoScalarFieldEnum[] | VideoScalarFieldEnum
    having?: VideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoCountAggregateInputType | true
    _avg?: VideoAvgAggregateInputType
    _sum?: VideoSumAggregateInputType
    _min?: VideoMinAggregateInputType
    _max?: VideoMaxAggregateInputType
  }

  export type VideoGroupByOutputType = {
    id: number
    title: string
    description: string
    playbackUrl: string
    videoPublicId: string
    duration: number
    views: number
    likes: number
    thumbnailUrl: string
    isPublished: boolean
    createdAt: Date
    updatedAt: Date
    _count: VideoCountAggregateOutputType | null
    _avg: VideoAvgAggregateOutputType | null
    _sum: VideoSumAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  type GetVideoGroupByPayload<T extends VideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoGroupByOutputType[P]>
            : GetScalarType<T[P], VideoGroupByOutputType[P]>
        }
      >
    >


  export type VideoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    playbackUrl?: boolean
    videoPublicId?: boolean
    duration?: boolean
    views?: boolean
    likes?: boolean
    thumbnailUrl?: boolean
    isPublished?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userVideos?: boolean | Video$userVideosArgs<ExtArgs>
    userComment?: boolean | Video$userCommentArgs<ExtArgs>
    userLike?: boolean | Video$userLikeArgs<ExtArgs>
    _count?: boolean | VideoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["video"]>

  export type VideoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    playbackUrl?: boolean
    videoPublicId?: boolean
    duration?: boolean
    views?: boolean
    likes?: boolean
    thumbnailUrl?: boolean
    isPublished?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["video"]>

  export type VideoSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    playbackUrl?: boolean
    videoPublicId?: boolean
    duration?: boolean
    views?: boolean
    likes?: boolean
    thumbnailUrl?: boolean
    isPublished?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VideoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userVideos?: boolean | Video$userVideosArgs<ExtArgs>
    userComment?: boolean | Video$userCommentArgs<ExtArgs>
    userLike?: boolean | Video$userLikeArgs<ExtArgs>
    _count?: boolean | VideoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VideoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VideoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Video"
    objects: {
      userVideos: Prisma.$UserVideoPayload<ExtArgs>[]
      userComment: Prisma.$UserCommentPayload<ExtArgs>[]
      userLike: Prisma.$UserLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      playbackUrl: string
      videoPublicId: string
      duration: number
      views: number
      likes: number
      thumbnailUrl: string
      isPublished: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["video"]>
    composites: {}
  }

  type VideoGetPayload<S extends boolean | null | undefined | VideoDefaultArgs> = $Result.GetResult<Prisma.$VideoPayload, S>

  type VideoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VideoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VideoCountAggregateInputType | true
    }

  export interface VideoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Video'], meta: { name: 'Video' } }
    /**
     * Find zero or one Video that matches the filter.
     * @param {VideoFindUniqueArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VideoFindUniqueArgs>(args: SelectSubset<T, VideoFindUniqueArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Video that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VideoFindUniqueOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VideoFindUniqueOrThrowArgs>(args: SelectSubset<T, VideoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Video that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VideoFindFirstArgs>(args?: SelectSubset<T, VideoFindFirstArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Video that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VideoFindFirstOrThrowArgs>(args?: SelectSubset<T, VideoFindFirstOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Videos
     * const videos = await prisma.video.findMany()
     * 
     * // Get first 10 Videos
     * const videos = await prisma.video.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videoWithIdOnly = await prisma.video.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VideoFindManyArgs>(args?: SelectSubset<T, VideoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Video.
     * @param {VideoCreateArgs} args - Arguments to create a Video.
     * @example
     * // Create one Video
     * const Video = await prisma.video.create({
     *   data: {
     *     // ... data to create a Video
     *   }
     * })
     * 
     */
    create<T extends VideoCreateArgs>(args: SelectSubset<T, VideoCreateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Videos.
     * @param {VideoCreateManyArgs} args - Arguments to create many Videos.
     * @example
     * // Create many Videos
     * const video = await prisma.video.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VideoCreateManyArgs>(args?: SelectSubset<T, VideoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Videos and returns the data saved in the database.
     * @param {VideoCreateManyAndReturnArgs} args - Arguments to create many Videos.
     * @example
     * // Create many Videos
     * const video = await prisma.video.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Videos and only return the `id`
     * const videoWithIdOnly = await prisma.video.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VideoCreateManyAndReturnArgs>(args?: SelectSubset<T, VideoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Video.
     * @param {VideoDeleteArgs} args - Arguments to delete one Video.
     * @example
     * // Delete one Video
     * const Video = await prisma.video.delete({
     *   where: {
     *     // ... filter to delete one Video
     *   }
     * })
     * 
     */
    delete<T extends VideoDeleteArgs>(args: SelectSubset<T, VideoDeleteArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Video.
     * @param {VideoUpdateArgs} args - Arguments to update one Video.
     * @example
     * // Update one Video
     * const video = await prisma.video.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VideoUpdateArgs>(args: SelectSubset<T, VideoUpdateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Videos.
     * @param {VideoDeleteManyArgs} args - Arguments to filter Videos to delete.
     * @example
     * // Delete a few Videos
     * const { count } = await prisma.video.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VideoDeleteManyArgs>(args?: SelectSubset<T, VideoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Videos
     * const video = await prisma.video.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VideoUpdateManyArgs>(args: SelectSubset<T, VideoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Video.
     * @param {VideoUpsertArgs} args - Arguments to update or create a Video.
     * @example
     * // Update or create a Video
     * const video = await prisma.video.upsert({
     *   create: {
     *     // ... data to create a Video
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Video we want to update
     *   }
     * })
     */
    upsert<T extends VideoUpsertArgs>(args: SelectSubset<T, VideoUpsertArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoCountArgs} args - Arguments to filter Videos to count.
     * @example
     * // Count the number of Videos
     * const count = await prisma.video.count({
     *   where: {
     *     // ... the filter for the Videos we want to count
     *   }
     * })
    **/
    count<T extends VideoCountArgs>(
      args?: Subset<T, VideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoAggregateArgs>(args: Subset<T, VideoAggregateArgs>): Prisma.PrismaPromise<GetVideoAggregateType<T>>

    /**
     * Group by Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideoGroupByArgs['orderBy'] }
        : { orderBy?: VideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Video model
   */
  readonly fields: VideoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Video.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VideoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userVideos<T extends Video$userVideosArgs<ExtArgs> = {}>(args?: Subset<T, Video$userVideosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "findMany"> | Null>
    userComment<T extends Video$userCommentArgs<ExtArgs> = {}>(args?: Subset<T, Video$userCommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "findMany"> | Null>
    userLike<T extends Video$userLikeArgs<ExtArgs> = {}>(args?: Subset<T, Video$userLikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Video model
   */ 
  interface VideoFieldRefs {
    readonly id: FieldRef<"Video", 'Int'>
    readonly title: FieldRef<"Video", 'String'>
    readonly description: FieldRef<"Video", 'String'>
    readonly playbackUrl: FieldRef<"Video", 'String'>
    readonly videoPublicId: FieldRef<"Video", 'String'>
    readonly duration: FieldRef<"Video", 'Float'>
    readonly views: FieldRef<"Video", 'Int'>
    readonly likes: FieldRef<"Video", 'Int'>
    readonly thumbnailUrl: FieldRef<"Video", 'String'>
    readonly isPublished: FieldRef<"Video", 'Boolean'>
    readonly createdAt: FieldRef<"Video", 'DateTime'>
    readonly updatedAt: FieldRef<"Video", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Video findUnique
   */
  export type VideoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findUniqueOrThrow
   */
  export type VideoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findFirst
   */
  export type VideoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findFirstOrThrow
   */
  export type VideoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findMany
   */
  export type VideoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Videos to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video create
   */
  export type VideoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to create a Video.
     */
    data: XOR<VideoCreateInput, VideoUncheckedCreateInput>
  }

  /**
   * Video createMany
   */
  export type VideoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Videos.
     */
    data: VideoCreateManyInput | VideoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Video createManyAndReturn
   */
  export type VideoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Videos.
     */
    data: VideoCreateManyInput | VideoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Video update
   */
  export type VideoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to update a Video.
     */
    data: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
    /**
     * Choose, which Video to update.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video updateMany
   */
  export type VideoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Videos.
     */
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyInput>
    /**
     * Filter which Videos to update
     */
    where?: VideoWhereInput
  }

  /**
   * Video upsert
   */
  export type VideoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The filter to search for the Video to update in case it exists.
     */
    where: VideoWhereUniqueInput
    /**
     * In case the Video found by the `where` argument doesn't exist, create a new Video with this data.
     */
    create: XOR<VideoCreateInput, VideoUncheckedCreateInput>
    /**
     * In case the Video was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
  }

  /**
   * Video delete
   */
  export type VideoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter which Video to delete.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video deleteMany
   */
  export type VideoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Videos to delete
     */
    where?: VideoWhereInput
  }

  /**
   * Video.userVideos
   */
  export type Video$userVideosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
    where?: UserVideoWhereInput
    orderBy?: UserVideoOrderByWithRelationInput | UserVideoOrderByWithRelationInput[]
    cursor?: UserVideoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserVideoScalarFieldEnum | UserVideoScalarFieldEnum[]
  }

  /**
   * Video.userComment
   */
  export type Video$userCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    where?: UserCommentWhereInput
    orderBy?: UserCommentOrderByWithRelationInput | UserCommentOrderByWithRelationInput[]
    cursor?: UserCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCommentScalarFieldEnum | UserCommentScalarFieldEnum[]
  }

  /**
   * Video.userLike
   */
  export type Video$userLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
    where?: UserLikeWhereInput
    orderBy?: UserLikeOrderByWithRelationInput | UserLikeOrderByWithRelationInput[]
    cursor?: UserLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLikeScalarFieldEnum | UserLikeScalarFieldEnum[]
  }

  /**
   * Video without action
   */
  export type VideoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
  }


  /**
   * Model UserVideo
   */

  export type AggregateUserVideo = {
    _count: UserVideoCountAggregateOutputType | null
    _avg: UserVideoAvgAggregateOutputType | null
    _sum: UserVideoSumAggregateOutputType | null
    _min: UserVideoMinAggregateOutputType | null
    _max: UserVideoMaxAggregateOutputType | null
  }

  export type UserVideoAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
  }

  export type UserVideoSumAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
  }

  export type UserVideoMinAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
  }

  export type UserVideoMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
  }

  export type UserVideoCountAggregateOutputType = {
    id: number
    userId: number
    videoId: number
    _all: number
  }


  export type UserVideoAvgAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
  }

  export type UserVideoSumAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
  }

  export type UserVideoMinAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
  }

  export type UserVideoMaxAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
  }

  export type UserVideoCountAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
    _all?: true
  }

  export type UserVideoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserVideo to aggregate.
     */
    where?: UserVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVideos to fetch.
     */
    orderBy?: UserVideoOrderByWithRelationInput | UserVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserVideos
    **/
    _count?: true | UserVideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserVideoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserVideoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserVideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserVideoMaxAggregateInputType
  }

  export type GetUserVideoAggregateType<T extends UserVideoAggregateArgs> = {
        [P in keyof T & keyof AggregateUserVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserVideo[P]>
      : GetScalarType<T[P], AggregateUserVideo[P]>
  }




  export type UserVideoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserVideoWhereInput
    orderBy?: UserVideoOrderByWithAggregationInput | UserVideoOrderByWithAggregationInput[]
    by: UserVideoScalarFieldEnum[] | UserVideoScalarFieldEnum
    having?: UserVideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserVideoCountAggregateInputType | true
    _avg?: UserVideoAvgAggregateInputType
    _sum?: UserVideoSumAggregateInputType
    _min?: UserVideoMinAggregateInputType
    _max?: UserVideoMaxAggregateInputType
  }

  export type UserVideoGroupByOutputType = {
    id: number
    userId: number
    videoId: number
    _count: UserVideoCountAggregateOutputType | null
    _avg: UserVideoAvgAggregateOutputType | null
    _sum: UserVideoSumAggregateOutputType | null
    _min: UserVideoMinAggregateOutputType | null
    _max: UserVideoMaxAggregateOutputType | null
  }

  type GetUserVideoGroupByPayload<T extends UserVideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserVideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserVideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserVideoGroupByOutputType[P]>
            : GetScalarType<T[P], UserVideoGroupByOutputType[P]>
        }
      >
    >


  export type UserVideoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    videoId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userVideo"]>

  export type UserVideoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    videoId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userVideo"]>

  export type UserVideoSelectScalar = {
    id?: boolean
    userId?: boolean
    videoId?: boolean
  }

  export type UserVideoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }
  export type UserVideoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }

  export type $UserVideoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserVideo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      video: Prisma.$VideoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      videoId: number
    }, ExtArgs["result"]["userVideo"]>
    composites: {}
  }

  type UserVideoGetPayload<S extends boolean | null | undefined | UserVideoDefaultArgs> = $Result.GetResult<Prisma.$UserVideoPayload, S>

  type UserVideoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserVideoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserVideoCountAggregateInputType | true
    }

  export interface UserVideoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserVideo'], meta: { name: 'UserVideo' } }
    /**
     * Find zero or one UserVideo that matches the filter.
     * @param {UserVideoFindUniqueArgs} args - Arguments to find a UserVideo
     * @example
     * // Get one UserVideo
     * const userVideo = await prisma.userVideo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserVideoFindUniqueArgs>(args: SelectSubset<T, UserVideoFindUniqueArgs<ExtArgs>>): Prisma__UserVideoClient<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserVideo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserVideoFindUniqueOrThrowArgs} args - Arguments to find a UserVideo
     * @example
     * // Get one UserVideo
     * const userVideo = await prisma.userVideo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserVideoFindUniqueOrThrowArgs>(args: SelectSubset<T, UserVideoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserVideoClient<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserVideo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVideoFindFirstArgs} args - Arguments to find a UserVideo
     * @example
     * // Get one UserVideo
     * const userVideo = await prisma.userVideo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserVideoFindFirstArgs>(args?: SelectSubset<T, UserVideoFindFirstArgs<ExtArgs>>): Prisma__UserVideoClient<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserVideo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVideoFindFirstOrThrowArgs} args - Arguments to find a UserVideo
     * @example
     * // Get one UserVideo
     * const userVideo = await prisma.userVideo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserVideoFindFirstOrThrowArgs>(args?: SelectSubset<T, UserVideoFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserVideoClient<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserVideos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVideoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserVideos
     * const userVideos = await prisma.userVideo.findMany()
     * 
     * // Get first 10 UserVideos
     * const userVideos = await prisma.userVideo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userVideoWithIdOnly = await prisma.userVideo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserVideoFindManyArgs>(args?: SelectSubset<T, UserVideoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserVideo.
     * @param {UserVideoCreateArgs} args - Arguments to create a UserVideo.
     * @example
     * // Create one UserVideo
     * const UserVideo = await prisma.userVideo.create({
     *   data: {
     *     // ... data to create a UserVideo
     *   }
     * })
     * 
     */
    create<T extends UserVideoCreateArgs>(args: SelectSubset<T, UserVideoCreateArgs<ExtArgs>>): Prisma__UserVideoClient<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserVideos.
     * @param {UserVideoCreateManyArgs} args - Arguments to create many UserVideos.
     * @example
     * // Create many UserVideos
     * const userVideo = await prisma.userVideo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserVideoCreateManyArgs>(args?: SelectSubset<T, UserVideoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserVideos and returns the data saved in the database.
     * @param {UserVideoCreateManyAndReturnArgs} args - Arguments to create many UserVideos.
     * @example
     * // Create many UserVideos
     * const userVideo = await prisma.userVideo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserVideos and only return the `id`
     * const userVideoWithIdOnly = await prisma.userVideo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserVideoCreateManyAndReturnArgs>(args?: SelectSubset<T, UserVideoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserVideo.
     * @param {UserVideoDeleteArgs} args - Arguments to delete one UserVideo.
     * @example
     * // Delete one UserVideo
     * const UserVideo = await prisma.userVideo.delete({
     *   where: {
     *     // ... filter to delete one UserVideo
     *   }
     * })
     * 
     */
    delete<T extends UserVideoDeleteArgs>(args: SelectSubset<T, UserVideoDeleteArgs<ExtArgs>>): Prisma__UserVideoClient<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserVideo.
     * @param {UserVideoUpdateArgs} args - Arguments to update one UserVideo.
     * @example
     * // Update one UserVideo
     * const userVideo = await prisma.userVideo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserVideoUpdateArgs>(args: SelectSubset<T, UserVideoUpdateArgs<ExtArgs>>): Prisma__UserVideoClient<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserVideos.
     * @param {UserVideoDeleteManyArgs} args - Arguments to filter UserVideos to delete.
     * @example
     * // Delete a few UserVideos
     * const { count } = await prisma.userVideo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserVideoDeleteManyArgs>(args?: SelectSubset<T, UserVideoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserVideos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserVideos
     * const userVideo = await prisma.userVideo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserVideoUpdateManyArgs>(args: SelectSubset<T, UserVideoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserVideo.
     * @param {UserVideoUpsertArgs} args - Arguments to update or create a UserVideo.
     * @example
     * // Update or create a UserVideo
     * const userVideo = await prisma.userVideo.upsert({
     *   create: {
     *     // ... data to create a UserVideo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserVideo we want to update
     *   }
     * })
     */
    upsert<T extends UserVideoUpsertArgs>(args: SelectSubset<T, UserVideoUpsertArgs<ExtArgs>>): Prisma__UserVideoClient<$Result.GetResult<Prisma.$UserVideoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserVideos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVideoCountArgs} args - Arguments to filter UserVideos to count.
     * @example
     * // Count the number of UserVideos
     * const count = await prisma.userVideo.count({
     *   where: {
     *     // ... the filter for the UserVideos we want to count
     *   }
     * })
    **/
    count<T extends UserVideoCountArgs>(
      args?: Subset<T, UserVideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserVideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserVideo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserVideoAggregateArgs>(args: Subset<T, UserVideoAggregateArgs>): Prisma.PrismaPromise<GetUserVideoAggregateType<T>>

    /**
     * Group by UserVideo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserVideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserVideoGroupByArgs['orderBy'] }
        : { orderBy?: UserVideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserVideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserVideo model
   */
  readonly fields: UserVideoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserVideo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserVideoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    video<T extends VideoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VideoDefaultArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserVideo model
   */ 
  interface UserVideoFieldRefs {
    readonly id: FieldRef<"UserVideo", 'Int'>
    readonly userId: FieldRef<"UserVideo", 'Int'>
    readonly videoId: FieldRef<"UserVideo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserVideo findUnique
   */
  export type UserVideoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
    /**
     * Filter, which UserVideo to fetch.
     */
    where: UserVideoWhereUniqueInput
  }

  /**
   * UserVideo findUniqueOrThrow
   */
  export type UserVideoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
    /**
     * Filter, which UserVideo to fetch.
     */
    where: UserVideoWhereUniqueInput
  }

  /**
   * UserVideo findFirst
   */
  export type UserVideoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
    /**
     * Filter, which UserVideo to fetch.
     */
    where?: UserVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVideos to fetch.
     */
    orderBy?: UserVideoOrderByWithRelationInput | UserVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserVideos.
     */
    cursor?: UserVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserVideos.
     */
    distinct?: UserVideoScalarFieldEnum | UserVideoScalarFieldEnum[]
  }

  /**
   * UserVideo findFirstOrThrow
   */
  export type UserVideoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
    /**
     * Filter, which UserVideo to fetch.
     */
    where?: UserVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVideos to fetch.
     */
    orderBy?: UserVideoOrderByWithRelationInput | UserVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserVideos.
     */
    cursor?: UserVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserVideos.
     */
    distinct?: UserVideoScalarFieldEnum | UserVideoScalarFieldEnum[]
  }

  /**
   * UserVideo findMany
   */
  export type UserVideoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
    /**
     * Filter, which UserVideos to fetch.
     */
    where?: UserVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVideos to fetch.
     */
    orderBy?: UserVideoOrderByWithRelationInput | UserVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserVideos.
     */
    cursor?: UserVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVideos.
     */
    skip?: number
    distinct?: UserVideoScalarFieldEnum | UserVideoScalarFieldEnum[]
  }

  /**
   * UserVideo create
   */
  export type UserVideoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
    /**
     * The data needed to create a UserVideo.
     */
    data: XOR<UserVideoCreateInput, UserVideoUncheckedCreateInput>
  }

  /**
   * UserVideo createMany
   */
  export type UserVideoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserVideos.
     */
    data: UserVideoCreateManyInput | UserVideoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserVideo createManyAndReturn
   */
  export type UserVideoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserVideos.
     */
    data: UserVideoCreateManyInput | UserVideoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserVideo update
   */
  export type UserVideoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
    /**
     * The data needed to update a UserVideo.
     */
    data: XOR<UserVideoUpdateInput, UserVideoUncheckedUpdateInput>
    /**
     * Choose, which UserVideo to update.
     */
    where: UserVideoWhereUniqueInput
  }

  /**
   * UserVideo updateMany
   */
  export type UserVideoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserVideos.
     */
    data: XOR<UserVideoUpdateManyMutationInput, UserVideoUncheckedUpdateManyInput>
    /**
     * Filter which UserVideos to update
     */
    where?: UserVideoWhereInput
  }

  /**
   * UserVideo upsert
   */
  export type UserVideoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
    /**
     * The filter to search for the UserVideo to update in case it exists.
     */
    where: UserVideoWhereUniqueInput
    /**
     * In case the UserVideo found by the `where` argument doesn't exist, create a new UserVideo with this data.
     */
    create: XOR<UserVideoCreateInput, UserVideoUncheckedCreateInput>
    /**
     * In case the UserVideo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserVideoUpdateInput, UserVideoUncheckedUpdateInput>
  }

  /**
   * UserVideo delete
   */
  export type UserVideoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
    /**
     * Filter which UserVideo to delete.
     */
    where: UserVideoWhereUniqueInput
  }

  /**
   * UserVideo deleteMany
   */
  export type UserVideoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserVideos to delete
     */
    where?: UserVideoWhereInput
  }

  /**
   * UserVideo without action
   */
  export type UserVideoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVideo
     */
    select?: UserVideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVideoInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    text: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    text: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    text: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    text?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    text: string
    createdAt: Date
    updatedAt: Date
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userComment?: boolean | Comment$userCommentArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    text?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userComment?: boolean | Comment$userCommentArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      userComment: Prisma.$UserCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      text: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userComment<T extends Comment$userCommentArgs<ExtArgs> = {}>(args?: Subset<T, Comment$userCommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly text: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment.userComment
   */
  export type Comment$userCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    where?: UserCommentWhereInput
    orderBy?: UserCommentOrderByWithRelationInput | UserCommentOrderByWithRelationInput[]
    cursor?: UserCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCommentScalarFieldEnum | UserCommentScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model UserComment
   */

  export type AggregateUserComment = {
    _count: UserCommentCountAggregateOutputType | null
    _avg: UserCommentAvgAggregateOutputType | null
    _sum: UserCommentSumAggregateOutputType | null
    _min: UserCommentMinAggregateOutputType | null
    _max: UserCommentMaxAggregateOutputType | null
  }

  export type UserCommentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
    commentId: number | null
  }

  export type UserCommentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
    commentId: number | null
  }

  export type UserCommentMinAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
    commentId: number | null
  }

  export type UserCommentMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
    commentId: number | null
  }

  export type UserCommentCountAggregateOutputType = {
    id: number
    userId: number
    videoId: number
    commentId: number
    _all: number
  }


  export type UserCommentAvgAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
    commentId?: true
  }

  export type UserCommentSumAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
    commentId?: true
  }

  export type UserCommentMinAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
    commentId?: true
  }

  export type UserCommentMaxAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
    commentId?: true
  }

  export type UserCommentCountAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
    commentId?: true
    _all?: true
  }

  export type UserCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserComment to aggregate.
     */
    where?: UserCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserComments to fetch.
     */
    orderBy?: UserCommentOrderByWithRelationInput | UserCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserComments
    **/
    _count?: true | UserCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCommentMaxAggregateInputType
  }

  export type GetUserCommentAggregateType<T extends UserCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateUserComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserComment[P]>
      : GetScalarType<T[P], AggregateUserComment[P]>
  }




  export type UserCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCommentWhereInput
    orderBy?: UserCommentOrderByWithAggregationInput | UserCommentOrderByWithAggregationInput[]
    by: UserCommentScalarFieldEnum[] | UserCommentScalarFieldEnum
    having?: UserCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCommentCountAggregateInputType | true
    _avg?: UserCommentAvgAggregateInputType
    _sum?: UserCommentSumAggregateInputType
    _min?: UserCommentMinAggregateInputType
    _max?: UserCommentMaxAggregateInputType
  }

  export type UserCommentGroupByOutputType = {
    id: number
    userId: number
    videoId: number
    commentId: number
    _count: UserCommentCountAggregateOutputType | null
    _avg: UserCommentAvgAggregateOutputType | null
    _sum: UserCommentSumAggregateOutputType | null
    _min: UserCommentMinAggregateOutputType | null
    _max: UserCommentMaxAggregateOutputType | null
  }

  type GetUserCommentGroupByPayload<T extends UserCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCommentGroupByOutputType[P]>
            : GetScalarType<T[P], UserCommentGroupByOutputType[P]>
        }
      >
    >


  export type UserCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    videoId?: boolean
    commentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userComment"]>

  export type UserCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    videoId?: boolean
    commentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userComment"]>

  export type UserCommentSelectScalar = {
    id?: boolean
    userId?: boolean
    videoId?: boolean
    commentId?: boolean
  }

  export type UserCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }
  export type UserCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }

  export type $UserCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserComment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      video: Prisma.$VideoPayload<ExtArgs>
      comment: Prisma.$CommentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      videoId: number
      commentId: number
    }, ExtArgs["result"]["userComment"]>
    composites: {}
  }

  type UserCommentGetPayload<S extends boolean | null | undefined | UserCommentDefaultArgs> = $Result.GetResult<Prisma.$UserCommentPayload, S>

  type UserCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserCommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCommentCountAggregateInputType | true
    }

  export interface UserCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserComment'], meta: { name: 'UserComment' } }
    /**
     * Find zero or one UserComment that matches the filter.
     * @param {UserCommentFindUniqueArgs} args - Arguments to find a UserComment
     * @example
     * // Get one UserComment
     * const userComment = await prisma.userComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCommentFindUniqueArgs>(args: SelectSubset<T, UserCommentFindUniqueArgs<ExtArgs>>): Prisma__UserCommentClient<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserComment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserCommentFindUniqueOrThrowArgs} args - Arguments to find a UserComment
     * @example
     * // Get one UserComment
     * const userComment = await prisma.userComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCommentClient<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommentFindFirstArgs} args - Arguments to find a UserComment
     * @example
     * // Get one UserComment
     * const userComment = await prisma.userComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCommentFindFirstArgs>(args?: SelectSubset<T, UserCommentFindFirstArgs<ExtArgs>>): Prisma__UserCommentClient<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommentFindFirstOrThrowArgs} args - Arguments to find a UserComment
     * @example
     * // Get one UserComment
     * const userComment = await prisma.userComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCommentClient<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserComments
     * const userComments = await prisma.userComment.findMany()
     * 
     * // Get first 10 UserComments
     * const userComments = await prisma.userComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userCommentWithIdOnly = await prisma.userComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserCommentFindManyArgs>(args?: SelectSubset<T, UserCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserComment.
     * @param {UserCommentCreateArgs} args - Arguments to create a UserComment.
     * @example
     * // Create one UserComment
     * const UserComment = await prisma.userComment.create({
     *   data: {
     *     // ... data to create a UserComment
     *   }
     * })
     * 
     */
    create<T extends UserCommentCreateArgs>(args: SelectSubset<T, UserCommentCreateArgs<ExtArgs>>): Prisma__UserCommentClient<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserComments.
     * @param {UserCommentCreateManyArgs} args - Arguments to create many UserComments.
     * @example
     * // Create many UserComments
     * const userComment = await prisma.userComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCommentCreateManyArgs>(args?: SelectSubset<T, UserCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserComments and returns the data saved in the database.
     * @param {UserCommentCreateManyAndReturnArgs} args - Arguments to create many UserComments.
     * @example
     * // Create many UserComments
     * const userComment = await prisma.userComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserComments and only return the `id`
     * const userCommentWithIdOnly = await prisma.userComment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserComment.
     * @param {UserCommentDeleteArgs} args - Arguments to delete one UserComment.
     * @example
     * // Delete one UserComment
     * const UserComment = await prisma.userComment.delete({
     *   where: {
     *     // ... filter to delete one UserComment
     *   }
     * })
     * 
     */
    delete<T extends UserCommentDeleteArgs>(args: SelectSubset<T, UserCommentDeleteArgs<ExtArgs>>): Prisma__UserCommentClient<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserComment.
     * @param {UserCommentUpdateArgs} args - Arguments to update one UserComment.
     * @example
     * // Update one UserComment
     * const userComment = await prisma.userComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCommentUpdateArgs>(args: SelectSubset<T, UserCommentUpdateArgs<ExtArgs>>): Prisma__UserCommentClient<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserComments.
     * @param {UserCommentDeleteManyArgs} args - Arguments to filter UserComments to delete.
     * @example
     * // Delete a few UserComments
     * const { count } = await prisma.userComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCommentDeleteManyArgs>(args?: SelectSubset<T, UserCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserComments
     * const userComment = await prisma.userComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCommentUpdateManyArgs>(args: SelectSubset<T, UserCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserComment.
     * @param {UserCommentUpsertArgs} args - Arguments to update or create a UserComment.
     * @example
     * // Update or create a UserComment
     * const userComment = await prisma.userComment.upsert({
     *   create: {
     *     // ... data to create a UserComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserComment we want to update
     *   }
     * })
     */
    upsert<T extends UserCommentUpsertArgs>(args: SelectSubset<T, UserCommentUpsertArgs<ExtArgs>>): Prisma__UserCommentClient<$Result.GetResult<Prisma.$UserCommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommentCountArgs} args - Arguments to filter UserComments to count.
     * @example
     * // Count the number of UserComments
     * const count = await prisma.userComment.count({
     *   where: {
     *     // ... the filter for the UserComments we want to count
     *   }
     * })
    **/
    count<T extends UserCommentCountArgs>(
      args?: Subset<T, UserCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCommentAggregateArgs>(args: Subset<T, UserCommentAggregateArgs>): Prisma.PrismaPromise<GetUserCommentAggregateType<T>>

    /**
     * Group by UserComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCommentGroupByArgs['orderBy'] }
        : { orderBy?: UserCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserComment model
   */
  readonly fields: UserCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    video<T extends VideoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VideoDefaultArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comment<T extends CommentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommentDefaultArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserComment model
   */ 
  interface UserCommentFieldRefs {
    readonly id: FieldRef<"UserComment", 'Int'>
    readonly userId: FieldRef<"UserComment", 'Int'>
    readonly videoId: FieldRef<"UserComment", 'Int'>
    readonly commentId: FieldRef<"UserComment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserComment findUnique
   */
  export type UserCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    /**
     * Filter, which UserComment to fetch.
     */
    where: UserCommentWhereUniqueInput
  }

  /**
   * UserComment findUniqueOrThrow
   */
  export type UserCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    /**
     * Filter, which UserComment to fetch.
     */
    where: UserCommentWhereUniqueInput
  }

  /**
   * UserComment findFirst
   */
  export type UserCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    /**
     * Filter, which UserComment to fetch.
     */
    where?: UserCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserComments to fetch.
     */
    orderBy?: UserCommentOrderByWithRelationInput | UserCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserComments.
     */
    cursor?: UserCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserComments.
     */
    distinct?: UserCommentScalarFieldEnum | UserCommentScalarFieldEnum[]
  }

  /**
   * UserComment findFirstOrThrow
   */
  export type UserCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    /**
     * Filter, which UserComment to fetch.
     */
    where?: UserCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserComments to fetch.
     */
    orderBy?: UserCommentOrderByWithRelationInput | UserCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserComments.
     */
    cursor?: UserCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserComments.
     */
    distinct?: UserCommentScalarFieldEnum | UserCommentScalarFieldEnum[]
  }

  /**
   * UserComment findMany
   */
  export type UserCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    /**
     * Filter, which UserComments to fetch.
     */
    where?: UserCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserComments to fetch.
     */
    orderBy?: UserCommentOrderByWithRelationInput | UserCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserComments.
     */
    cursor?: UserCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserComments.
     */
    skip?: number
    distinct?: UserCommentScalarFieldEnum | UserCommentScalarFieldEnum[]
  }

  /**
   * UserComment create
   */
  export type UserCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a UserComment.
     */
    data: XOR<UserCommentCreateInput, UserCommentUncheckedCreateInput>
  }

  /**
   * UserComment createMany
   */
  export type UserCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserComments.
     */
    data: UserCommentCreateManyInput | UserCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserComment createManyAndReturn
   */
  export type UserCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserComments.
     */
    data: UserCommentCreateManyInput | UserCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserComment update
   */
  export type UserCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a UserComment.
     */
    data: XOR<UserCommentUpdateInput, UserCommentUncheckedUpdateInput>
    /**
     * Choose, which UserComment to update.
     */
    where: UserCommentWhereUniqueInput
  }

  /**
   * UserComment updateMany
   */
  export type UserCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserComments.
     */
    data: XOR<UserCommentUpdateManyMutationInput, UserCommentUncheckedUpdateManyInput>
    /**
     * Filter which UserComments to update
     */
    where?: UserCommentWhereInput
  }

  /**
   * UserComment upsert
   */
  export type UserCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the UserComment to update in case it exists.
     */
    where: UserCommentWhereUniqueInput
    /**
     * In case the UserComment found by the `where` argument doesn't exist, create a new UserComment with this data.
     */
    create: XOR<UserCommentCreateInput, UserCommentUncheckedCreateInput>
    /**
     * In case the UserComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCommentUpdateInput, UserCommentUncheckedUpdateInput>
  }

  /**
   * UserComment delete
   */
  export type UserCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
    /**
     * Filter which UserComment to delete.
     */
    where: UserCommentWhereUniqueInput
  }

  /**
   * UserComment deleteMany
   */
  export type UserCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserComments to delete
     */
    where?: UserCommentWhereInput
  }

  /**
   * UserComment without action
   */
  export type UserCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserComment
     */
    select?: UserCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommentInclude<ExtArgs> | null
  }


  /**
   * Model UserLike
   */

  export type AggregateUserLike = {
    _count: UserLikeCountAggregateOutputType | null
    _avg: UserLikeAvgAggregateOutputType | null
    _sum: UserLikeSumAggregateOutputType | null
    _min: UserLikeMinAggregateOutputType | null
    _max: UserLikeMaxAggregateOutputType | null
  }

  export type UserLikeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
  }

  export type UserLikeSumAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
  }

  export type UserLikeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
  }

  export type UserLikeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    videoId: number | null
  }

  export type UserLikeCountAggregateOutputType = {
    id: number
    userId: number
    videoId: number
    _all: number
  }


  export type UserLikeAvgAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
  }

  export type UserLikeSumAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
  }

  export type UserLikeMinAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
  }

  export type UserLikeMaxAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
  }

  export type UserLikeCountAggregateInputType = {
    id?: true
    userId?: true
    videoId?: true
    _all?: true
  }

  export type UserLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLike to aggregate.
     */
    where?: UserLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikes to fetch.
     */
    orderBy?: UserLikeOrderByWithRelationInput | UserLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLikes
    **/
    _count?: true | UserLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserLikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserLikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLikeMaxAggregateInputType
  }

  export type GetUserLikeAggregateType<T extends UserLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLike[P]>
      : GetScalarType<T[P], AggregateUserLike[P]>
  }




  export type UserLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLikeWhereInput
    orderBy?: UserLikeOrderByWithAggregationInput | UserLikeOrderByWithAggregationInput[]
    by: UserLikeScalarFieldEnum[] | UserLikeScalarFieldEnum
    having?: UserLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLikeCountAggregateInputType | true
    _avg?: UserLikeAvgAggregateInputType
    _sum?: UserLikeSumAggregateInputType
    _min?: UserLikeMinAggregateInputType
    _max?: UserLikeMaxAggregateInputType
  }

  export type UserLikeGroupByOutputType = {
    id: number
    userId: number
    videoId: number
    _count: UserLikeCountAggregateOutputType | null
    _avg: UserLikeAvgAggregateOutputType | null
    _sum: UserLikeSumAggregateOutputType | null
    _min: UserLikeMinAggregateOutputType | null
    _max: UserLikeMaxAggregateOutputType | null
  }

  type GetUserLikeGroupByPayload<T extends UserLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLikeGroupByOutputType[P]>
            : GetScalarType<T[P], UserLikeGroupByOutputType[P]>
        }
      >
    >


  export type UserLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    videoId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLike"]>

  export type UserLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    videoId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLike"]>

  export type UserLikeSelectScalar = {
    id?: boolean
    userId?: boolean
    videoId?: boolean
  }

  export type UserLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }
  export type UserLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }

  export type $UserLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLike"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      video: Prisma.$VideoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      videoId: number
    }, ExtArgs["result"]["userLike"]>
    composites: {}
  }

  type UserLikeGetPayload<S extends boolean | null | undefined | UserLikeDefaultArgs> = $Result.GetResult<Prisma.$UserLikePayload, S>

  type UserLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserLikeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserLikeCountAggregateInputType | true
    }

  export interface UserLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLike'], meta: { name: 'UserLike' } }
    /**
     * Find zero or one UserLike that matches the filter.
     * @param {UserLikeFindUniqueArgs} args - Arguments to find a UserLike
     * @example
     * // Get one UserLike
     * const userLike = await prisma.userLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLikeFindUniqueArgs>(args: SelectSubset<T, UserLikeFindUniqueArgs<ExtArgs>>): Prisma__UserLikeClient<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserLike that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserLikeFindUniqueOrThrowArgs} args - Arguments to find a UserLike
     * @example
     * // Get one UserLike
     * const userLike = await prisma.userLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLikeClient<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikeFindFirstArgs} args - Arguments to find a UserLike
     * @example
     * // Get one UserLike
     * const userLike = await prisma.userLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLikeFindFirstArgs>(args?: SelectSubset<T, UserLikeFindFirstArgs<ExtArgs>>): Prisma__UserLikeClient<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikeFindFirstOrThrowArgs} args - Arguments to find a UserLike
     * @example
     * // Get one UserLike
     * const userLike = await prisma.userLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLikeClient<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLikes
     * const userLikes = await prisma.userLike.findMany()
     * 
     * // Get first 10 UserLikes
     * const userLikes = await prisma.userLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userLikeWithIdOnly = await prisma.userLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserLikeFindManyArgs>(args?: SelectSubset<T, UserLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserLike.
     * @param {UserLikeCreateArgs} args - Arguments to create a UserLike.
     * @example
     * // Create one UserLike
     * const UserLike = await prisma.userLike.create({
     *   data: {
     *     // ... data to create a UserLike
     *   }
     * })
     * 
     */
    create<T extends UserLikeCreateArgs>(args: SelectSubset<T, UserLikeCreateArgs<ExtArgs>>): Prisma__UserLikeClient<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserLikes.
     * @param {UserLikeCreateManyArgs} args - Arguments to create many UserLikes.
     * @example
     * // Create many UserLikes
     * const userLike = await prisma.userLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLikeCreateManyArgs>(args?: SelectSubset<T, UserLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserLikes and returns the data saved in the database.
     * @param {UserLikeCreateManyAndReturnArgs} args - Arguments to create many UserLikes.
     * @example
     * // Create many UserLikes
     * const userLike = await prisma.userLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserLikes and only return the `id`
     * const userLikeWithIdOnly = await prisma.userLike.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserLike.
     * @param {UserLikeDeleteArgs} args - Arguments to delete one UserLike.
     * @example
     * // Delete one UserLike
     * const UserLike = await prisma.userLike.delete({
     *   where: {
     *     // ... filter to delete one UserLike
     *   }
     * })
     * 
     */
    delete<T extends UserLikeDeleteArgs>(args: SelectSubset<T, UserLikeDeleteArgs<ExtArgs>>): Prisma__UserLikeClient<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserLike.
     * @param {UserLikeUpdateArgs} args - Arguments to update one UserLike.
     * @example
     * // Update one UserLike
     * const userLike = await prisma.userLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLikeUpdateArgs>(args: SelectSubset<T, UserLikeUpdateArgs<ExtArgs>>): Prisma__UserLikeClient<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserLikes.
     * @param {UserLikeDeleteManyArgs} args - Arguments to filter UserLikes to delete.
     * @example
     * // Delete a few UserLikes
     * const { count } = await prisma.userLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLikeDeleteManyArgs>(args?: SelectSubset<T, UserLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLikes
     * const userLike = await prisma.userLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLikeUpdateManyArgs>(args: SelectSubset<T, UserLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserLike.
     * @param {UserLikeUpsertArgs} args - Arguments to update or create a UserLike.
     * @example
     * // Update or create a UserLike
     * const userLike = await prisma.userLike.upsert({
     *   create: {
     *     // ... data to create a UserLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLike we want to update
     *   }
     * })
     */
    upsert<T extends UserLikeUpsertArgs>(args: SelectSubset<T, UserLikeUpsertArgs<ExtArgs>>): Prisma__UserLikeClient<$Result.GetResult<Prisma.$UserLikePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikeCountArgs} args - Arguments to filter UserLikes to count.
     * @example
     * // Count the number of UserLikes
     * const count = await prisma.userLike.count({
     *   where: {
     *     // ... the filter for the UserLikes we want to count
     *   }
     * })
    **/
    count<T extends UserLikeCountArgs>(
      args?: Subset<T, UserLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLikeAggregateArgs>(args: Subset<T, UserLikeAggregateArgs>): Prisma.PrismaPromise<GetUserLikeAggregateType<T>>

    /**
     * Group by UserLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLikeGroupByArgs['orderBy'] }
        : { orderBy?: UserLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLike model
   */
  readonly fields: UserLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    video<T extends VideoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VideoDefaultArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLike model
   */ 
  interface UserLikeFieldRefs {
    readonly id: FieldRef<"UserLike", 'Int'>
    readonly userId: FieldRef<"UserLike", 'Int'>
    readonly videoId: FieldRef<"UserLike", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserLike findUnique
   */
  export type UserLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
    /**
     * Filter, which UserLike to fetch.
     */
    where: UserLikeWhereUniqueInput
  }

  /**
   * UserLike findUniqueOrThrow
   */
  export type UserLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
    /**
     * Filter, which UserLike to fetch.
     */
    where: UserLikeWhereUniqueInput
  }

  /**
   * UserLike findFirst
   */
  export type UserLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
    /**
     * Filter, which UserLike to fetch.
     */
    where?: UserLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikes to fetch.
     */
    orderBy?: UserLikeOrderByWithRelationInput | UserLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLikes.
     */
    cursor?: UserLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLikes.
     */
    distinct?: UserLikeScalarFieldEnum | UserLikeScalarFieldEnum[]
  }

  /**
   * UserLike findFirstOrThrow
   */
  export type UserLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
    /**
     * Filter, which UserLike to fetch.
     */
    where?: UserLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikes to fetch.
     */
    orderBy?: UserLikeOrderByWithRelationInput | UserLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLikes.
     */
    cursor?: UserLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLikes.
     */
    distinct?: UserLikeScalarFieldEnum | UserLikeScalarFieldEnum[]
  }

  /**
   * UserLike findMany
   */
  export type UserLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
    /**
     * Filter, which UserLikes to fetch.
     */
    where?: UserLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikes to fetch.
     */
    orderBy?: UserLikeOrderByWithRelationInput | UserLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLikes.
     */
    cursor?: UserLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikes.
     */
    skip?: number
    distinct?: UserLikeScalarFieldEnum | UserLikeScalarFieldEnum[]
  }

  /**
   * UserLike create
   */
  export type UserLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserLike.
     */
    data: XOR<UserLikeCreateInput, UserLikeUncheckedCreateInput>
  }

  /**
   * UserLike createMany
   */
  export type UserLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLikes.
     */
    data: UserLikeCreateManyInput | UserLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserLike createManyAndReturn
   */
  export type UserLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserLikes.
     */
    data: UserLikeCreateManyInput | UserLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserLike update
   */
  export type UserLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserLike.
     */
    data: XOR<UserLikeUpdateInput, UserLikeUncheckedUpdateInput>
    /**
     * Choose, which UserLike to update.
     */
    where: UserLikeWhereUniqueInput
  }

  /**
   * UserLike updateMany
   */
  export type UserLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLikes.
     */
    data: XOR<UserLikeUpdateManyMutationInput, UserLikeUncheckedUpdateManyInput>
    /**
     * Filter which UserLikes to update
     */
    where?: UserLikeWhereInput
  }

  /**
   * UserLike upsert
   */
  export type UserLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserLike to update in case it exists.
     */
    where: UserLikeWhereUniqueInput
    /**
     * In case the UserLike found by the `where` argument doesn't exist, create a new UserLike with this data.
     */
    create: XOR<UserLikeCreateInput, UserLikeUncheckedCreateInput>
    /**
     * In case the UserLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLikeUpdateInput, UserLikeUncheckedUpdateInput>
  }

  /**
   * UserLike delete
   */
  export type UserLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
    /**
     * Filter which UserLike to delete.
     */
    where: UserLikeWhereUniqueInput
  }

  /**
   * UserLike deleteMany
   */
  export type UserLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLikes to delete
     */
    where?: UserLikeWhereInput
  }

  /**
   * UserLike without action
   */
  export type UserLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLike
     */
    select?: UserLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email',
    password: 'password',
    profileUrl: 'profileUrl',
    imagePublicId: 'imagePublicId',
    refreshToken: 'refreshToken',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VideoScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    playbackUrl: 'playbackUrl',
    videoPublicId: 'videoPublicId',
    duration: 'duration',
    views: 'views',
    likes: 'likes',
    thumbnailUrl: 'thumbnailUrl',
    isPublished: 'isPublished',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VideoScalarFieldEnum = (typeof VideoScalarFieldEnum)[keyof typeof VideoScalarFieldEnum]


  export const UserVideoScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    videoId: 'videoId'
  };

  export type UserVideoScalarFieldEnum = (typeof UserVideoScalarFieldEnum)[keyof typeof UserVideoScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    text: 'text',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const UserCommentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    videoId: 'videoId',
    commentId: 'commentId'
  };

  export type UserCommentScalarFieldEnum = (typeof UserCommentScalarFieldEnum)[keyof typeof UserCommentScalarFieldEnum]


  export const UserLikeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    videoId: 'videoId'
  };

  export type UserLikeScalarFieldEnum = (typeof UserLikeScalarFieldEnum)[keyof typeof UserLikeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    fullName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profileUrl?: StringNullableFilter<"User"> | string | null
    imagePublicId?: StringNullableFilter<"User"> | string | null
    refreshToken?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    userVideos?: UserVideoListRelationFilter
    userComment?: UserCommentListRelationFilter
    userLike?: UserLikeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileUrl?: SortOrderInput | SortOrder
    imagePublicId?: SortOrderInput | SortOrder
    refreshToken?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userVideos?: UserVideoOrderByRelationAggregateInput
    userComment?: UserCommentOrderByRelationAggregateInput
    userLike?: UserLikeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profileUrl?: StringNullableFilter<"User"> | string | null
    imagePublicId?: StringNullableFilter<"User"> | string | null
    refreshToken?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    userVideos?: UserVideoListRelationFilter
    userComment?: UserCommentListRelationFilter
    userLike?: UserLikeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileUrl?: SortOrderInput | SortOrder
    imagePublicId?: SortOrderInput | SortOrder
    refreshToken?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    fullName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    profileUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    imagePublicId?: StringNullableWithAggregatesFilter<"User"> | string | null
    refreshToken?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type VideoWhereInput = {
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    id?: IntFilter<"Video"> | number
    title?: StringFilter<"Video"> | string
    description?: StringFilter<"Video"> | string
    playbackUrl?: StringFilter<"Video"> | string
    videoPublicId?: StringFilter<"Video"> | string
    duration?: FloatFilter<"Video"> | number
    views?: IntFilter<"Video"> | number
    likes?: IntFilter<"Video"> | number
    thumbnailUrl?: StringFilter<"Video"> | string
    isPublished?: BoolFilter<"Video"> | boolean
    createdAt?: DateTimeFilter<"Video"> | Date | string
    updatedAt?: DateTimeFilter<"Video"> | Date | string
    userVideos?: UserVideoListRelationFilter
    userComment?: UserCommentListRelationFilter
    userLike?: UserLikeListRelationFilter
  }

  export type VideoOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    playbackUrl?: SortOrder
    videoPublicId?: SortOrder
    duration?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    thumbnailUrl?: SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userVideos?: UserVideoOrderByRelationAggregateInput
    userComment?: UserCommentOrderByRelationAggregateInput
    userLike?: UserLikeOrderByRelationAggregateInput
  }

  export type VideoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    videoPublicId?: string
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    title?: StringFilter<"Video"> | string
    description?: StringFilter<"Video"> | string
    playbackUrl?: StringFilter<"Video"> | string
    duration?: FloatFilter<"Video"> | number
    views?: IntFilter<"Video"> | number
    likes?: IntFilter<"Video"> | number
    thumbnailUrl?: StringFilter<"Video"> | string
    isPublished?: BoolFilter<"Video"> | boolean
    createdAt?: DateTimeFilter<"Video"> | Date | string
    updatedAt?: DateTimeFilter<"Video"> | Date | string
    userVideos?: UserVideoListRelationFilter
    userComment?: UserCommentListRelationFilter
    userLike?: UserLikeListRelationFilter
  }, "id" | "videoPublicId">

  export type VideoOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    playbackUrl?: SortOrder
    videoPublicId?: SortOrder
    duration?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    thumbnailUrl?: SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VideoCountOrderByAggregateInput
    _avg?: VideoAvgOrderByAggregateInput
    _max?: VideoMaxOrderByAggregateInput
    _min?: VideoMinOrderByAggregateInput
    _sum?: VideoSumOrderByAggregateInput
  }

  export type VideoScalarWhereWithAggregatesInput = {
    AND?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    OR?: VideoScalarWhereWithAggregatesInput[]
    NOT?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Video"> | number
    title?: StringWithAggregatesFilter<"Video"> | string
    description?: StringWithAggregatesFilter<"Video"> | string
    playbackUrl?: StringWithAggregatesFilter<"Video"> | string
    videoPublicId?: StringWithAggregatesFilter<"Video"> | string
    duration?: FloatWithAggregatesFilter<"Video"> | number
    views?: IntWithAggregatesFilter<"Video"> | number
    likes?: IntWithAggregatesFilter<"Video"> | number
    thumbnailUrl?: StringWithAggregatesFilter<"Video"> | string
    isPublished?: BoolWithAggregatesFilter<"Video"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Video"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Video"> | Date | string
  }

  export type UserVideoWhereInput = {
    AND?: UserVideoWhereInput | UserVideoWhereInput[]
    OR?: UserVideoWhereInput[]
    NOT?: UserVideoWhereInput | UserVideoWhereInput[]
    id?: IntFilter<"UserVideo"> | number
    userId?: IntFilter<"UserVideo"> | number
    videoId?: IntFilter<"UserVideo"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    video?: XOR<VideoRelationFilter, VideoWhereInput>
  }

  export type UserVideoOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    user?: UserOrderByWithRelationInput
    video?: VideoOrderByWithRelationInput
  }

  export type UserVideoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserVideoWhereInput | UserVideoWhereInput[]
    OR?: UserVideoWhereInput[]
    NOT?: UserVideoWhereInput | UserVideoWhereInput[]
    userId?: IntFilter<"UserVideo"> | number
    videoId?: IntFilter<"UserVideo"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    video?: XOR<VideoRelationFilter, VideoWhereInput>
  }, "id">

  export type UserVideoOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    _count?: UserVideoCountOrderByAggregateInput
    _avg?: UserVideoAvgOrderByAggregateInput
    _max?: UserVideoMaxOrderByAggregateInput
    _min?: UserVideoMinOrderByAggregateInput
    _sum?: UserVideoSumOrderByAggregateInput
  }

  export type UserVideoScalarWhereWithAggregatesInput = {
    AND?: UserVideoScalarWhereWithAggregatesInput | UserVideoScalarWhereWithAggregatesInput[]
    OR?: UserVideoScalarWhereWithAggregatesInput[]
    NOT?: UserVideoScalarWhereWithAggregatesInput | UserVideoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserVideo"> | number
    userId?: IntWithAggregatesFilter<"UserVideo"> | number
    videoId?: IntWithAggregatesFilter<"UserVideo"> | number
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    userComment?: UserCommentListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userComment?: UserCommentOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    userComment?: UserCommentListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    text?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type UserCommentWhereInput = {
    AND?: UserCommentWhereInput | UserCommentWhereInput[]
    OR?: UserCommentWhereInput[]
    NOT?: UserCommentWhereInput | UserCommentWhereInput[]
    id?: IntFilter<"UserComment"> | number
    userId?: IntFilter<"UserComment"> | number
    videoId?: IntFilter<"UserComment"> | number
    commentId?: IntFilter<"UserComment"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    video?: XOR<VideoRelationFilter, VideoWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }

  export type UserCommentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    commentId?: SortOrder
    user?: UserOrderByWithRelationInput
    video?: VideoOrderByWithRelationInput
    comment?: CommentOrderByWithRelationInput
  }

  export type UserCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    commentId?: number
    AND?: UserCommentWhereInput | UserCommentWhereInput[]
    OR?: UserCommentWhereInput[]
    NOT?: UserCommentWhereInput | UserCommentWhereInput[]
    userId?: IntFilter<"UserComment"> | number
    videoId?: IntFilter<"UserComment"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    video?: XOR<VideoRelationFilter, VideoWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }, "id" | "commentId">

  export type UserCommentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    commentId?: SortOrder
    _count?: UserCommentCountOrderByAggregateInput
    _avg?: UserCommentAvgOrderByAggregateInput
    _max?: UserCommentMaxOrderByAggregateInput
    _min?: UserCommentMinOrderByAggregateInput
    _sum?: UserCommentSumOrderByAggregateInput
  }

  export type UserCommentScalarWhereWithAggregatesInput = {
    AND?: UserCommentScalarWhereWithAggregatesInput | UserCommentScalarWhereWithAggregatesInput[]
    OR?: UserCommentScalarWhereWithAggregatesInput[]
    NOT?: UserCommentScalarWhereWithAggregatesInput | UserCommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserComment"> | number
    userId?: IntWithAggregatesFilter<"UserComment"> | number
    videoId?: IntWithAggregatesFilter<"UserComment"> | number
    commentId?: IntWithAggregatesFilter<"UserComment"> | number
  }

  export type UserLikeWhereInput = {
    AND?: UserLikeWhereInput | UserLikeWhereInput[]
    OR?: UserLikeWhereInput[]
    NOT?: UserLikeWhereInput | UserLikeWhereInput[]
    id?: IntFilter<"UserLike"> | number
    userId?: IntFilter<"UserLike"> | number
    videoId?: IntFilter<"UserLike"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    video?: XOR<VideoRelationFilter, VideoWhereInput>
  }

  export type UserLikeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    user?: UserOrderByWithRelationInput
    video?: VideoOrderByWithRelationInput
  }

  export type UserLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserLikeWhereInput | UserLikeWhereInput[]
    OR?: UserLikeWhereInput[]
    NOT?: UserLikeWhereInput | UserLikeWhereInput[]
    userId?: IntFilter<"UserLike"> | number
    videoId?: IntFilter<"UserLike"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    video?: XOR<VideoRelationFilter, VideoWhereInput>
  }, "id">

  export type UserLikeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    _count?: UserLikeCountOrderByAggregateInput
    _avg?: UserLikeAvgOrderByAggregateInput
    _max?: UserLikeMaxOrderByAggregateInput
    _min?: UserLikeMinOrderByAggregateInput
    _sum?: UserLikeSumOrderByAggregateInput
  }

  export type UserLikeScalarWhereWithAggregatesInput = {
    AND?: UserLikeScalarWhereWithAggregatesInput | UserLikeScalarWhereWithAggregatesInput[]
    OR?: UserLikeScalarWhereWithAggregatesInput[]
    NOT?: UserLikeScalarWhereWithAggregatesInput | UserLikeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserLike"> | number
    userId?: IntWithAggregatesFilter<"UserLike"> | number
    videoId?: IntWithAggregatesFilter<"UserLike"> | number
  }

  export type UserCreateInput = {
    fullName: string
    email: string
    password: string
    profileUrl?: string | null
    imagePublicId?: string | null
    refreshToken: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoCreateNestedManyWithoutUserInput
    userComment?: UserCommentCreateNestedManyWithoutUserInput
    userLike?: UserLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    fullName: string
    email: string
    password: string
    profileUrl?: string | null
    imagePublicId?: string | null
    refreshToken: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoUncheckedCreateNestedManyWithoutUserInput
    userComment?: UserCommentUncheckedCreateNestedManyWithoutUserInput
    userLike?: UserLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUpdateManyWithoutUserNestedInput
    userComment?: UserCommentUpdateManyWithoutUserNestedInput
    userLike?: UserLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUncheckedUpdateManyWithoutUserNestedInput
    userComment?: UserCommentUncheckedUpdateManyWithoutUserNestedInput
    userLike?: UserLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    fullName: string
    email: string
    password: string
    profileUrl?: string | null
    imagePublicId?: string | null
    refreshToken: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoCreateInput = {
    title: string
    description: string
    playbackUrl: string
    videoPublicId: string
    duration: number
    views?: number
    likes?: number
    thumbnailUrl: string
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoCreateNestedManyWithoutVideoInput
    userComment?: UserCommentCreateNestedManyWithoutVideoInput
    userLike?: UserLikeCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    playbackUrl: string
    videoPublicId: string
    duration: number
    views?: number
    likes?: number
    thumbnailUrl: string
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoUncheckedCreateNestedManyWithoutVideoInput
    userComment?: UserCommentUncheckedCreateNestedManyWithoutVideoInput
    userLike?: UserLikeUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playbackUrl?: StringFieldUpdateOperationsInput | string
    videoPublicId?: StringFieldUpdateOperationsInput | string
    duration?: FloatFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUpdateManyWithoutVideoNestedInput
    userComment?: UserCommentUpdateManyWithoutVideoNestedInput
    userLike?: UserLikeUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playbackUrl?: StringFieldUpdateOperationsInput | string
    videoPublicId?: StringFieldUpdateOperationsInput | string
    duration?: FloatFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUncheckedUpdateManyWithoutVideoNestedInput
    userComment?: UserCommentUncheckedUpdateManyWithoutVideoNestedInput
    userLike?: UserLikeUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type VideoCreateManyInput = {
    id?: number
    title: string
    description: string
    playbackUrl: string
    videoPublicId: string
    duration: number
    views?: number
    likes?: number
    thumbnailUrl: string
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playbackUrl?: StringFieldUpdateOperationsInput | string
    videoPublicId?: StringFieldUpdateOperationsInput | string
    duration?: FloatFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playbackUrl?: StringFieldUpdateOperationsInput | string
    videoPublicId?: StringFieldUpdateOperationsInput | string
    duration?: FloatFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserVideoCreateInput = {
    user: UserCreateNestedOneWithoutUserVideosInput
    video: VideoCreateNestedOneWithoutUserVideosInput
  }

  export type UserVideoUncheckedCreateInput = {
    id?: number
    userId: number
    videoId: number
  }

  export type UserVideoUpdateInput = {
    user?: UserUpdateOneRequiredWithoutUserVideosNestedInput
    video?: VideoUpdateOneRequiredWithoutUserVideosNestedInput
  }

  export type UserVideoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
  }

  export type UserVideoCreateManyInput = {
    id?: number
    userId: number
    videoId: number
  }

  export type UserVideoUpdateManyMutationInput = {

  }

  export type UserVideoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userComment?: UserCommentCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userComment?: UserCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userComment?: UserCommentUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userComment?: UserCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: number
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCommentCreateInput = {
    user: UserCreateNestedOneWithoutUserCommentInput
    video: VideoCreateNestedOneWithoutUserCommentInput
    comment: CommentCreateNestedOneWithoutUserCommentInput
  }

  export type UserCommentUncheckedCreateInput = {
    id?: number
    userId: number
    videoId: number
    commentId: number
  }

  export type UserCommentUpdateInput = {
    user?: UserUpdateOneRequiredWithoutUserCommentNestedInput
    video?: VideoUpdateOneRequiredWithoutUserCommentNestedInput
    comment?: CommentUpdateOneRequiredWithoutUserCommentNestedInput
  }

  export type UserCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCommentCreateManyInput = {
    id?: number
    userId: number
    videoId: number
    commentId: number
  }

  export type UserCommentUpdateManyMutationInput = {

  }

  export type UserCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikeCreateInput = {
    user: UserCreateNestedOneWithoutUserLikeInput
    video: VideoCreateNestedOneWithoutUserLikeInput
  }

  export type UserLikeUncheckedCreateInput = {
    id?: number
    userId: number
    videoId: number
  }

  export type UserLikeUpdateInput = {
    user?: UserUpdateOneRequiredWithoutUserLikeNestedInput
    video?: VideoUpdateOneRequiredWithoutUserLikeNestedInput
  }

  export type UserLikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikeCreateManyInput = {
    id?: number
    userId: number
    videoId: number
  }

  export type UserLikeUpdateManyMutationInput = {

  }

  export type UserLikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserVideoListRelationFilter = {
    every?: UserVideoWhereInput
    some?: UserVideoWhereInput
    none?: UserVideoWhereInput
  }

  export type UserCommentListRelationFilter = {
    every?: UserCommentWhereInput
    some?: UserCommentWhereInput
    none?: UserCommentWhereInput
  }

  export type UserLikeListRelationFilter = {
    every?: UserLikeWhereInput
    some?: UserLikeWhereInput
    none?: UserLikeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserVideoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileUrl?: SortOrder
    imagePublicId?: SortOrder
    refreshToken?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileUrl?: SortOrder
    imagePublicId?: SortOrder
    refreshToken?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileUrl?: SortOrder
    imagePublicId?: SortOrder
    refreshToken?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type VideoCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    playbackUrl?: SortOrder
    videoPublicId?: SortOrder
    duration?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    thumbnailUrl?: SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    views?: SortOrder
    likes?: SortOrder
  }

  export type VideoMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    playbackUrl?: SortOrder
    videoPublicId?: SortOrder
    duration?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    thumbnailUrl?: SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    playbackUrl?: SortOrder
    videoPublicId?: SortOrder
    duration?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    thumbnailUrl?: SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    views?: SortOrder
    likes?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type VideoRelationFilter = {
    is?: VideoWhereInput
    isNot?: VideoWhereInput
  }

  export type UserVideoCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
  }

  export type UserVideoAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
  }

  export type UserVideoMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
  }

  export type UserVideoMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
  }

  export type UserVideoSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CommentRelationFilter = {
    is?: CommentWhereInput
    isNot?: CommentWhereInput
  }

  export type UserCommentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    commentId?: SortOrder
  }

  export type UserCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    commentId?: SortOrder
  }

  export type UserCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    commentId?: SortOrder
  }

  export type UserCommentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    commentId?: SortOrder
  }

  export type UserCommentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    commentId?: SortOrder
  }

  export type UserLikeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
  }

  export type UserLikeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
  }

  export type UserLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
  }

  export type UserLikeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
  }

  export type UserLikeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
  }

  export type UserVideoCreateNestedManyWithoutUserInput = {
    create?: XOR<UserVideoCreateWithoutUserInput, UserVideoUncheckedCreateWithoutUserInput> | UserVideoCreateWithoutUserInput[] | UserVideoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserVideoCreateOrConnectWithoutUserInput | UserVideoCreateOrConnectWithoutUserInput[]
    createMany?: UserVideoCreateManyUserInputEnvelope
    connect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
  }

  export type UserCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCommentCreateWithoutUserInput, UserCommentUncheckedCreateWithoutUserInput> | UserCommentCreateWithoutUserInput[] | UserCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutUserInput | UserCommentCreateOrConnectWithoutUserInput[]
    createMany?: UserCommentCreateManyUserInputEnvelope
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
  }

  export type UserLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLikeCreateWithoutUserInput, UserLikeUncheckedCreateWithoutUserInput> | UserLikeCreateWithoutUserInput[] | UserLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikeCreateOrConnectWithoutUserInput | UserLikeCreateOrConnectWithoutUserInput[]
    createMany?: UserLikeCreateManyUserInputEnvelope
    connect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
  }

  export type UserVideoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserVideoCreateWithoutUserInput, UserVideoUncheckedCreateWithoutUserInput> | UserVideoCreateWithoutUserInput[] | UserVideoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserVideoCreateOrConnectWithoutUserInput | UserVideoCreateOrConnectWithoutUserInput[]
    createMany?: UserVideoCreateManyUserInputEnvelope
    connect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
  }

  export type UserCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCommentCreateWithoutUserInput, UserCommentUncheckedCreateWithoutUserInput> | UserCommentCreateWithoutUserInput[] | UserCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutUserInput | UserCommentCreateOrConnectWithoutUserInput[]
    createMany?: UserCommentCreateManyUserInputEnvelope
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
  }

  export type UserLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLikeCreateWithoutUserInput, UserLikeUncheckedCreateWithoutUserInput> | UserLikeCreateWithoutUserInput[] | UserLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikeCreateOrConnectWithoutUserInput | UserLikeCreateOrConnectWithoutUserInput[]
    createMany?: UserLikeCreateManyUserInputEnvelope
    connect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserVideoUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserVideoCreateWithoutUserInput, UserVideoUncheckedCreateWithoutUserInput> | UserVideoCreateWithoutUserInput[] | UserVideoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserVideoCreateOrConnectWithoutUserInput | UserVideoCreateOrConnectWithoutUserInput[]
    upsert?: UserVideoUpsertWithWhereUniqueWithoutUserInput | UserVideoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserVideoCreateManyUserInputEnvelope
    set?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    disconnect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    delete?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    connect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    update?: UserVideoUpdateWithWhereUniqueWithoutUserInput | UserVideoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserVideoUpdateManyWithWhereWithoutUserInput | UserVideoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserVideoScalarWhereInput | UserVideoScalarWhereInput[]
  }

  export type UserCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCommentCreateWithoutUserInput, UserCommentUncheckedCreateWithoutUserInput> | UserCommentCreateWithoutUserInput[] | UserCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutUserInput | UserCommentCreateOrConnectWithoutUserInput[]
    upsert?: UserCommentUpsertWithWhereUniqueWithoutUserInput | UserCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCommentCreateManyUserInputEnvelope
    set?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    disconnect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    delete?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    update?: UserCommentUpdateWithWhereUniqueWithoutUserInput | UserCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCommentUpdateManyWithWhereWithoutUserInput | UserCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCommentScalarWhereInput | UserCommentScalarWhereInput[]
  }

  export type UserLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLikeCreateWithoutUserInput, UserLikeUncheckedCreateWithoutUserInput> | UserLikeCreateWithoutUserInput[] | UserLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikeCreateOrConnectWithoutUserInput | UserLikeCreateOrConnectWithoutUserInput[]
    upsert?: UserLikeUpsertWithWhereUniqueWithoutUserInput | UserLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLikeCreateManyUserInputEnvelope
    set?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    disconnect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    delete?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    connect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    update?: UserLikeUpdateWithWhereUniqueWithoutUserInput | UserLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLikeUpdateManyWithWhereWithoutUserInput | UserLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLikeScalarWhereInput | UserLikeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserVideoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserVideoCreateWithoutUserInput, UserVideoUncheckedCreateWithoutUserInput> | UserVideoCreateWithoutUserInput[] | UserVideoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserVideoCreateOrConnectWithoutUserInput | UserVideoCreateOrConnectWithoutUserInput[]
    upsert?: UserVideoUpsertWithWhereUniqueWithoutUserInput | UserVideoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserVideoCreateManyUserInputEnvelope
    set?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    disconnect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    delete?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    connect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    update?: UserVideoUpdateWithWhereUniqueWithoutUserInput | UserVideoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserVideoUpdateManyWithWhereWithoutUserInput | UserVideoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserVideoScalarWhereInput | UserVideoScalarWhereInput[]
  }

  export type UserCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCommentCreateWithoutUserInput, UserCommentUncheckedCreateWithoutUserInput> | UserCommentCreateWithoutUserInput[] | UserCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutUserInput | UserCommentCreateOrConnectWithoutUserInput[]
    upsert?: UserCommentUpsertWithWhereUniqueWithoutUserInput | UserCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCommentCreateManyUserInputEnvelope
    set?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    disconnect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    delete?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    update?: UserCommentUpdateWithWhereUniqueWithoutUserInput | UserCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCommentUpdateManyWithWhereWithoutUserInput | UserCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCommentScalarWhereInput | UserCommentScalarWhereInput[]
  }

  export type UserLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLikeCreateWithoutUserInput, UserLikeUncheckedCreateWithoutUserInput> | UserLikeCreateWithoutUserInput[] | UserLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikeCreateOrConnectWithoutUserInput | UserLikeCreateOrConnectWithoutUserInput[]
    upsert?: UserLikeUpsertWithWhereUniqueWithoutUserInput | UserLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLikeCreateManyUserInputEnvelope
    set?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    disconnect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    delete?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    connect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    update?: UserLikeUpdateWithWhereUniqueWithoutUserInput | UserLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLikeUpdateManyWithWhereWithoutUserInput | UserLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLikeScalarWhereInput | UserLikeScalarWhereInput[]
  }

  export type UserVideoCreateNestedManyWithoutVideoInput = {
    create?: XOR<UserVideoCreateWithoutVideoInput, UserVideoUncheckedCreateWithoutVideoInput> | UserVideoCreateWithoutVideoInput[] | UserVideoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserVideoCreateOrConnectWithoutVideoInput | UserVideoCreateOrConnectWithoutVideoInput[]
    createMany?: UserVideoCreateManyVideoInputEnvelope
    connect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
  }

  export type UserCommentCreateNestedManyWithoutVideoInput = {
    create?: XOR<UserCommentCreateWithoutVideoInput, UserCommentUncheckedCreateWithoutVideoInput> | UserCommentCreateWithoutVideoInput[] | UserCommentUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutVideoInput | UserCommentCreateOrConnectWithoutVideoInput[]
    createMany?: UserCommentCreateManyVideoInputEnvelope
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
  }

  export type UserLikeCreateNestedManyWithoutVideoInput = {
    create?: XOR<UserLikeCreateWithoutVideoInput, UserLikeUncheckedCreateWithoutVideoInput> | UserLikeCreateWithoutVideoInput[] | UserLikeUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserLikeCreateOrConnectWithoutVideoInput | UserLikeCreateOrConnectWithoutVideoInput[]
    createMany?: UserLikeCreateManyVideoInputEnvelope
    connect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
  }

  export type UserVideoUncheckedCreateNestedManyWithoutVideoInput = {
    create?: XOR<UserVideoCreateWithoutVideoInput, UserVideoUncheckedCreateWithoutVideoInput> | UserVideoCreateWithoutVideoInput[] | UserVideoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserVideoCreateOrConnectWithoutVideoInput | UserVideoCreateOrConnectWithoutVideoInput[]
    createMany?: UserVideoCreateManyVideoInputEnvelope
    connect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
  }

  export type UserCommentUncheckedCreateNestedManyWithoutVideoInput = {
    create?: XOR<UserCommentCreateWithoutVideoInput, UserCommentUncheckedCreateWithoutVideoInput> | UserCommentCreateWithoutVideoInput[] | UserCommentUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutVideoInput | UserCommentCreateOrConnectWithoutVideoInput[]
    createMany?: UserCommentCreateManyVideoInputEnvelope
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
  }

  export type UserLikeUncheckedCreateNestedManyWithoutVideoInput = {
    create?: XOR<UserLikeCreateWithoutVideoInput, UserLikeUncheckedCreateWithoutVideoInput> | UserLikeCreateWithoutVideoInput[] | UserLikeUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserLikeCreateOrConnectWithoutVideoInput | UserLikeCreateOrConnectWithoutVideoInput[]
    createMany?: UserLikeCreateManyVideoInputEnvelope
    connect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserVideoUpdateManyWithoutVideoNestedInput = {
    create?: XOR<UserVideoCreateWithoutVideoInput, UserVideoUncheckedCreateWithoutVideoInput> | UserVideoCreateWithoutVideoInput[] | UserVideoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserVideoCreateOrConnectWithoutVideoInput | UserVideoCreateOrConnectWithoutVideoInput[]
    upsert?: UserVideoUpsertWithWhereUniqueWithoutVideoInput | UserVideoUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: UserVideoCreateManyVideoInputEnvelope
    set?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    disconnect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    delete?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    connect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    update?: UserVideoUpdateWithWhereUniqueWithoutVideoInput | UserVideoUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: UserVideoUpdateManyWithWhereWithoutVideoInput | UserVideoUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: UserVideoScalarWhereInput | UserVideoScalarWhereInput[]
  }

  export type UserCommentUpdateManyWithoutVideoNestedInput = {
    create?: XOR<UserCommentCreateWithoutVideoInput, UserCommentUncheckedCreateWithoutVideoInput> | UserCommentCreateWithoutVideoInput[] | UserCommentUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutVideoInput | UserCommentCreateOrConnectWithoutVideoInput[]
    upsert?: UserCommentUpsertWithWhereUniqueWithoutVideoInput | UserCommentUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: UserCommentCreateManyVideoInputEnvelope
    set?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    disconnect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    delete?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    update?: UserCommentUpdateWithWhereUniqueWithoutVideoInput | UserCommentUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: UserCommentUpdateManyWithWhereWithoutVideoInput | UserCommentUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: UserCommentScalarWhereInput | UserCommentScalarWhereInput[]
  }

  export type UserLikeUpdateManyWithoutVideoNestedInput = {
    create?: XOR<UserLikeCreateWithoutVideoInput, UserLikeUncheckedCreateWithoutVideoInput> | UserLikeCreateWithoutVideoInput[] | UserLikeUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserLikeCreateOrConnectWithoutVideoInput | UserLikeCreateOrConnectWithoutVideoInput[]
    upsert?: UserLikeUpsertWithWhereUniqueWithoutVideoInput | UserLikeUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: UserLikeCreateManyVideoInputEnvelope
    set?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    disconnect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    delete?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    connect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    update?: UserLikeUpdateWithWhereUniqueWithoutVideoInput | UserLikeUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: UserLikeUpdateManyWithWhereWithoutVideoInput | UserLikeUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: UserLikeScalarWhereInput | UserLikeScalarWhereInput[]
  }

  export type UserVideoUncheckedUpdateManyWithoutVideoNestedInput = {
    create?: XOR<UserVideoCreateWithoutVideoInput, UserVideoUncheckedCreateWithoutVideoInput> | UserVideoCreateWithoutVideoInput[] | UserVideoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserVideoCreateOrConnectWithoutVideoInput | UserVideoCreateOrConnectWithoutVideoInput[]
    upsert?: UserVideoUpsertWithWhereUniqueWithoutVideoInput | UserVideoUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: UserVideoCreateManyVideoInputEnvelope
    set?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    disconnect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    delete?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    connect?: UserVideoWhereUniqueInput | UserVideoWhereUniqueInput[]
    update?: UserVideoUpdateWithWhereUniqueWithoutVideoInput | UserVideoUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: UserVideoUpdateManyWithWhereWithoutVideoInput | UserVideoUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: UserVideoScalarWhereInput | UserVideoScalarWhereInput[]
  }

  export type UserCommentUncheckedUpdateManyWithoutVideoNestedInput = {
    create?: XOR<UserCommentCreateWithoutVideoInput, UserCommentUncheckedCreateWithoutVideoInput> | UserCommentCreateWithoutVideoInput[] | UserCommentUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutVideoInput | UserCommentCreateOrConnectWithoutVideoInput[]
    upsert?: UserCommentUpsertWithWhereUniqueWithoutVideoInput | UserCommentUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: UserCommentCreateManyVideoInputEnvelope
    set?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    disconnect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    delete?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    update?: UserCommentUpdateWithWhereUniqueWithoutVideoInput | UserCommentUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: UserCommentUpdateManyWithWhereWithoutVideoInput | UserCommentUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: UserCommentScalarWhereInput | UserCommentScalarWhereInput[]
  }

  export type UserLikeUncheckedUpdateManyWithoutVideoNestedInput = {
    create?: XOR<UserLikeCreateWithoutVideoInput, UserLikeUncheckedCreateWithoutVideoInput> | UserLikeCreateWithoutVideoInput[] | UserLikeUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: UserLikeCreateOrConnectWithoutVideoInput | UserLikeCreateOrConnectWithoutVideoInput[]
    upsert?: UserLikeUpsertWithWhereUniqueWithoutVideoInput | UserLikeUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: UserLikeCreateManyVideoInputEnvelope
    set?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    disconnect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    delete?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    connect?: UserLikeWhereUniqueInput | UserLikeWhereUniqueInput[]
    update?: UserLikeUpdateWithWhereUniqueWithoutVideoInput | UserLikeUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: UserLikeUpdateManyWithWhereWithoutVideoInput | UserLikeUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: UserLikeScalarWhereInput | UserLikeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserVideosInput = {
    create?: XOR<UserCreateWithoutUserVideosInput, UserUncheckedCreateWithoutUserVideosInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserVideosInput
    connect?: UserWhereUniqueInput
  }

  export type VideoCreateNestedOneWithoutUserVideosInput = {
    create?: XOR<VideoCreateWithoutUserVideosInput, VideoUncheckedCreateWithoutUserVideosInput>
    connectOrCreate?: VideoCreateOrConnectWithoutUserVideosInput
    connect?: VideoWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserVideosNestedInput = {
    create?: XOR<UserCreateWithoutUserVideosInput, UserUncheckedCreateWithoutUserVideosInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserVideosInput
    upsert?: UserUpsertWithoutUserVideosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserVideosInput, UserUpdateWithoutUserVideosInput>, UserUncheckedUpdateWithoutUserVideosInput>
  }

  export type VideoUpdateOneRequiredWithoutUserVideosNestedInput = {
    create?: XOR<VideoCreateWithoutUserVideosInput, VideoUncheckedCreateWithoutUserVideosInput>
    connectOrCreate?: VideoCreateOrConnectWithoutUserVideosInput
    upsert?: VideoUpsertWithoutUserVideosInput
    connect?: VideoWhereUniqueInput
    update?: XOR<XOR<VideoUpdateToOneWithWhereWithoutUserVideosInput, VideoUpdateWithoutUserVideosInput>, VideoUncheckedUpdateWithoutUserVideosInput>
  }

  export type UserCommentCreateNestedManyWithoutCommentInput = {
    create?: XOR<UserCommentCreateWithoutCommentInput, UserCommentUncheckedCreateWithoutCommentInput> | UserCommentCreateWithoutCommentInput[] | UserCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutCommentInput | UserCommentCreateOrConnectWithoutCommentInput[]
    createMany?: UserCommentCreateManyCommentInputEnvelope
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
  }

  export type UserCommentUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<UserCommentCreateWithoutCommentInput, UserCommentUncheckedCreateWithoutCommentInput> | UserCommentCreateWithoutCommentInput[] | UserCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutCommentInput | UserCommentCreateOrConnectWithoutCommentInput[]
    createMany?: UserCommentCreateManyCommentInputEnvelope
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
  }

  export type UserCommentUpdateManyWithoutCommentNestedInput = {
    create?: XOR<UserCommentCreateWithoutCommentInput, UserCommentUncheckedCreateWithoutCommentInput> | UserCommentCreateWithoutCommentInput[] | UserCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutCommentInput | UserCommentCreateOrConnectWithoutCommentInput[]
    upsert?: UserCommentUpsertWithWhereUniqueWithoutCommentInput | UserCommentUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: UserCommentCreateManyCommentInputEnvelope
    set?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    disconnect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    delete?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    update?: UserCommentUpdateWithWhereUniqueWithoutCommentInput | UserCommentUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: UserCommentUpdateManyWithWhereWithoutCommentInput | UserCommentUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: UserCommentScalarWhereInput | UserCommentScalarWhereInput[]
  }

  export type UserCommentUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<UserCommentCreateWithoutCommentInput, UserCommentUncheckedCreateWithoutCommentInput> | UserCommentCreateWithoutCommentInput[] | UserCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: UserCommentCreateOrConnectWithoutCommentInput | UserCommentCreateOrConnectWithoutCommentInput[]
    upsert?: UserCommentUpsertWithWhereUniqueWithoutCommentInput | UserCommentUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: UserCommentCreateManyCommentInputEnvelope
    set?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    disconnect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    delete?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    connect?: UserCommentWhereUniqueInput | UserCommentWhereUniqueInput[]
    update?: UserCommentUpdateWithWhereUniqueWithoutCommentInput | UserCommentUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: UserCommentUpdateManyWithWhereWithoutCommentInput | UserCommentUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: UserCommentScalarWhereInput | UserCommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserCommentInput = {
    create?: XOR<UserCreateWithoutUserCommentInput, UserUncheckedCreateWithoutUserCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCommentInput
    connect?: UserWhereUniqueInput
  }

  export type VideoCreateNestedOneWithoutUserCommentInput = {
    create?: XOR<VideoCreateWithoutUserCommentInput, VideoUncheckedCreateWithoutUserCommentInput>
    connectOrCreate?: VideoCreateOrConnectWithoutUserCommentInput
    connect?: VideoWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutUserCommentInput = {
    create?: XOR<CommentCreateWithoutUserCommentInput, CommentUncheckedCreateWithoutUserCommentInput>
    connectOrCreate?: CommentCreateOrConnectWithoutUserCommentInput
    connect?: CommentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserCommentNestedInput = {
    create?: XOR<UserCreateWithoutUserCommentInput, UserUncheckedCreateWithoutUserCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCommentInput
    upsert?: UserUpsertWithoutUserCommentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserCommentInput, UserUpdateWithoutUserCommentInput>, UserUncheckedUpdateWithoutUserCommentInput>
  }

  export type VideoUpdateOneRequiredWithoutUserCommentNestedInput = {
    create?: XOR<VideoCreateWithoutUserCommentInput, VideoUncheckedCreateWithoutUserCommentInput>
    connectOrCreate?: VideoCreateOrConnectWithoutUserCommentInput
    upsert?: VideoUpsertWithoutUserCommentInput
    connect?: VideoWhereUniqueInput
    update?: XOR<XOR<VideoUpdateToOneWithWhereWithoutUserCommentInput, VideoUpdateWithoutUserCommentInput>, VideoUncheckedUpdateWithoutUserCommentInput>
  }

  export type CommentUpdateOneRequiredWithoutUserCommentNestedInput = {
    create?: XOR<CommentCreateWithoutUserCommentInput, CommentUncheckedCreateWithoutUserCommentInput>
    connectOrCreate?: CommentCreateOrConnectWithoutUserCommentInput
    upsert?: CommentUpsertWithoutUserCommentInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutUserCommentInput, CommentUpdateWithoutUserCommentInput>, CommentUncheckedUpdateWithoutUserCommentInput>
  }

  export type UserCreateNestedOneWithoutUserLikeInput = {
    create?: XOR<UserCreateWithoutUserLikeInput, UserUncheckedCreateWithoutUserLikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserLikeInput
    connect?: UserWhereUniqueInput
  }

  export type VideoCreateNestedOneWithoutUserLikeInput = {
    create?: XOR<VideoCreateWithoutUserLikeInput, VideoUncheckedCreateWithoutUserLikeInput>
    connectOrCreate?: VideoCreateOrConnectWithoutUserLikeInput
    connect?: VideoWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserLikeNestedInput = {
    create?: XOR<UserCreateWithoutUserLikeInput, UserUncheckedCreateWithoutUserLikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserLikeInput
    upsert?: UserUpsertWithoutUserLikeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserLikeInput, UserUpdateWithoutUserLikeInput>, UserUncheckedUpdateWithoutUserLikeInput>
  }

  export type VideoUpdateOneRequiredWithoutUserLikeNestedInput = {
    create?: XOR<VideoCreateWithoutUserLikeInput, VideoUncheckedCreateWithoutUserLikeInput>
    connectOrCreate?: VideoCreateOrConnectWithoutUserLikeInput
    upsert?: VideoUpsertWithoutUserLikeInput
    connect?: VideoWhereUniqueInput
    update?: XOR<XOR<VideoUpdateToOneWithWhereWithoutUserLikeInput, VideoUpdateWithoutUserLikeInput>, VideoUncheckedUpdateWithoutUserLikeInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserVideoCreateWithoutUserInput = {
    video: VideoCreateNestedOneWithoutUserVideosInput
  }

  export type UserVideoUncheckedCreateWithoutUserInput = {
    id?: number
    videoId: number
  }

  export type UserVideoCreateOrConnectWithoutUserInput = {
    where: UserVideoWhereUniqueInput
    create: XOR<UserVideoCreateWithoutUserInput, UserVideoUncheckedCreateWithoutUserInput>
  }

  export type UserVideoCreateManyUserInputEnvelope = {
    data: UserVideoCreateManyUserInput | UserVideoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCommentCreateWithoutUserInput = {
    video: VideoCreateNestedOneWithoutUserCommentInput
    comment: CommentCreateNestedOneWithoutUserCommentInput
  }

  export type UserCommentUncheckedCreateWithoutUserInput = {
    id?: number
    videoId: number
    commentId: number
  }

  export type UserCommentCreateOrConnectWithoutUserInput = {
    where: UserCommentWhereUniqueInput
    create: XOR<UserCommentCreateWithoutUserInput, UserCommentUncheckedCreateWithoutUserInput>
  }

  export type UserCommentCreateManyUserInputEnvelope = {
    data: UserCommentCreateManyUserInput | UserCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserLikeCreateWithoutUserInput = {
    video: VideoCreateNestedOneWithoutUserLikeInput
  }

  export type UserLikeUncheckedCreateWithoutUserInput = {
    id?: number
    videoId: number
  }

  export type UserLikeCreateOrConnectWithoutUserInput = {
    where: UserLikeWhereUniqueInput
    create: XOR<UserLikeCreateWithoutUserInput, UserLikeUncheckedCreateWithoutUserInput>
  }

  export type UserLikeCreateManyUserInputEnvelope = {
    data: UserLikeCreateManyUserInput | UserLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserVideoUpsertWithWhereUniqueWithoutUserInput = {
    where: UserVideoWhereUniqueInput
    update: XOR<UserVideoUpdateWithoutUserInput, UserVideoUncheckedUpdateWithoutUserInput>
    create: XOR<UserVideoCreateWithoutUserInput, UserVideoUncheckedCreateWithoutUserInput>
  }

  export type UserVideoUpdateWithWhereUniqueWithoutUserInput = {
    where: UserVideoWhereUniqueInput
    data: XOR<UserVideoUpdateWithoutUserInput, UserVideoUncheckedUpdateWithoutUserInput>
  }

  export type UserVideoUpdateManyWithWhereWithoutUserInput = {
    where: UserVideoScalarWhereInput
    data: XOR<UserVideoUpdateManyMutationInput, UserVideoUncheckedUpdateManyWithoutUserInput>
  }

  export type UserVideoScalarWhereInput = {
    AND?: UserVideoScalarWhereInput | UserVideoScalarWhereInput[]
    OR?: UserVideoScalarWhereInput[]
    NOT?: UserVideoScalarWhereInput | UserVideoScalarWhereInput[]
    id?: IntFilter<"UserVideo"> | number
    userId?: IntFilter<"UserVideo"> | number
    videoId?: IntFilter<"UserVideo"> | number
  }

  export type UserCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: UserCommentWhereUniqueInput
    update: XOR<UserCommentUpdateWithoutUserInput, UserCommentUncheckedUpdateWithoutUserInput>
    create: XOR<UserCommentCreateWithoutUserInput, UserCommentUncheckedCreateWithoutUserInput>
  }

  export type UserCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: UserCommentWhereUniqueInput
    data: XOR<UserCommentUpdateWithoutUserInput, UserCommentUncheckedUpdateWithoutUserInput>
  }

  export type UserCommentUpdateManyWithWhereWithoutUserInput = {
    where: UserCommentScalarWhereInput
    data: XOR<UserCommentUpdateManyMutationInput, UserCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCommentScalarWhereInput = {
    AND?: UserCommentScalarWhereInput | UserCommentScalarWhereInput[]
    OR?: UserCommentScalarWhereInput[]
    NOT?: UserCommentScalarWhereInput | UserCommentScalarWhereInput[]
    id?: IntFilter<"UserComment"> | number
    userId?: IntFilter<"UserComment"> | number
    videoId?: IntFilter<"UserComment"> | number
    commentId?: IntFilter<"UserComment"> | number
  }

  export type UserLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserLikeWhereUniqueInput
    update: XOR<UserLikeUpdateWithoutUserInput, UserLikeUncheckedUpdateWithoutUserInput>
    create: XOR<UserLikeCreateWithoutUserInput, UserLikeUncheckedCreateWithoutUserInput>
  }

  export type UserLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserLikeWhereUniqueInput
    data: XOR<UserLikeUpdateWithoutUserInput, UserLikeUncheckedUpdateWithoutUserInput>
  }

  export type UserLikeUpdateManyWithWhereWithoutUserInput = {
    where: UserLikeScalarWhereInput
    data: XOR<UserLikeUpdateManyMutationInput, UserLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type UserLikeScalarWhereInput = {
    AND?: UserLikeScalarWhereInput | UserLikeScalarWhereInput[]
    OR?: UserLikeScalarWhereInput[]
    NOT?: UserLikeScalarWhereInput | UserLikeScalarWhereInput[]
    id?: IntFilter<"UserLike"> | number
    userId?: IntFilter<"UserLike"> | number
    videoId?: IntFilter<"UserLike"> | number
  }

  export type UserVideoCreateWithoutVideoInput = {
    user: UserCreateNestedOneWithoutUserVideosInput
  }

  export type UserVideoUncheckedCreateWithoutVideoInput = {
    id?: number
    userId: number
  }

  export type UserVideoCreateOrConnectWithoutVideoInput = {
    where: UserVideoWhereUniqueInput
    create: XOR<UserVideoCreateWithoutVideoInput, UserVideoUncheckedCreateWithoutVideoInput>
  }

  export type UserVideoCreateManyVideoInputEnvelope = {
    data: UserVideoCreateManyVideoInput | UserVideoCreateManyVideoInput[]
    skipDuplicates?: boolean
  }

  export type UserCommentCreateWithoutVideoInput = {
    user: UserCreateNestedOneWithoutUserCommentInput
    comment: CommentCreateNestedOneWithoutUserCommentInput
  }

  export type UserCommentUncheckedCreateWithoutVideoInput = {
    id?: number
    userId: number
    commentId: number
  }

  export type UserCommentCreateOrConnectWithoutVideoInput = {
    where: UserCommentWhereUniqueInput
    create: XOR<UserCommentCreateWithoutVideoInput, UserCommentUncheckedCreateWithoutVideoInput>
  }

  export type UserCommentCreateManyVideoInputEnvelope = {
    data: UserCommentCreateManyVideoInput | UserCommentCreateManyVideoInput[]
    skipDuplicates?: boolean
  }

  export type UserLikeCreateWithoutVideoInput = {
    user: UserCreateNestedOneWithoutUserLikeInput
  }

  export type UserLikeUncheckedCreateWithoutVideoInput = {
    id?: number
    userId: number
  }

  export type UserLikeCreateOrConnectWithoutVideoInput = {
    where: UserLikeWhereUniqueInput
    create: XOR<UserLikeCreateWithoutVideoInput, UserLikeUncheckedCreateWithoutVideoInput>
  }

  export type UserLikeCreateManyVideoInputEnvelope = {
    data: UserLikeCreateManyVideoInput | UserLikeCreateManyVideoInput[]
    skipDuplicates?: boolean
  }

  export type UserVideoUpsertWithWhereUniqueWithoutVideoInput = {
    where: UserVideoWhereUniqueInput
    update: XOR<UserVideoUpdateWithoutVideoInput, UserVideoUncheckedUpdateWithoutVideoInput>
    create: XOR<UserVideoCreateWithoutVideoInput, UserVideoUncheckedCreateWithoutVideoInput>
  }

  export type UserVideoUpdateWithWhereUniqueWithoutVideoInput = {
    where: UserVideoWhereUniqueInput
    data: XOR<UserVideoUpdateWithoutVideoInput, UserVideoUncheckedUpdateWithoutVideoInput>
  }

  export type UserVideoUpdateManyWithWhereWithoutVideoInput = {
    where: UserVideoScalarWhereInput
    data: XOR<UserVideoUpdateManyMutationInput, UserVideoUncheckedUpdateManyWithoutVideoInput>
  }

  export type UserCommentUpsertWithWhereUniqueWithoutVideoInput = {
    where: UserCommentWhereUniqueInput
    update: XOR<UserCommentUpdateWithoutVideoInput, UserCommentUncheckedUpdateWithoutVideoInput>
    create: XOR<UserCommentCreateWithoutVideoInput, UserCommentUncheckedCreateWithoutVideoInput>
  }

  export type UserCommentUpdateWithWhereUniqueWithoutVideoInput = {
    where: UserCommentWhereUniqueInput
    data: XOR<UserCommentUpdateWithoutVideoInput, UserCommentUncheckedUpdateWithoutVideoInput>
  }

  export type UserCommentUpdateManyWithWhereWithoutVideoInput = {
    where: UserCommentScalarWhereInput
    data: XOR<UserCommentUpdateManyMutationInput, UserCommentUncheckedUpdateManyWithoutVideoInput>
  }

  export type UserLikeUpsertWithWhereUniqueWithoutVideoInput = {
    where: UserLikeWhereUniqueInput
    update: XOR<UserLikeUpdateWithoutVideoInput, UserLikeUncheckedUpdateWithoutVideoInput>
    create: XOR<UserLikeCreateWithoutVideoInput, UserLikeUncheckedCreateWithoutVideoInput>
  }

  export type UserLikeUpdateWithWhereUniqueWithoutVideoInput = {
    where: UserLikeWhereUniqueInput
    data: XOR<UserLikeUpdateWithoutVideoInput, UserLikeUncheckedUpdateWithoutVideoInput>
  }

  export type UserLikeUpdateManyWithWhereWithoutVideoInput = {
    where: UserLikeScalarWhereInput
    data: XOR<UserLikeUpdateManyMutationInput, UserLikeUncheckedUpdateManyWithoutVideoInput>
  }

  export type UserCreateWithoutUserVideosInput = {
    fullName: string
    email: string
    password: string
    profileUrl?: string | null
    imagePublicId?: string | null
    refreshToken: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userComment?: UserCommentCreateNestedManyWithoutUserInput
    userLike?: UserLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserVideosInput = {
    id?: number
    fullName: string
    email: string
    password: string
    profileUrl?: string | null
    imagePublicId?: string | null
    refreshToken: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userComment?: UserCommentUncheckedCreateNestedManyWithoutUserInput
    userLike?: UserLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserVideosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserVideosInput, UserUncheckedCreateWithoutUserVideosInput>
  }

  export type VideoCreateWithoutUserVideosInput = {
    title: string
    description: string
    playbackUrl: string
    videoPublicId: string
    duration: number
    views?: number
    likes?: number
    thumbnailUrl: string
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userComment?: UserCommentCreateNestedManyWithoutVideoInput
    userLike?: UserLikeCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateWithoutUserVideosInput = {
    id?: number
    title: string
    description: string
    playbackUrl: string
    videoPublicId: string
    duration: number
    views?: number
    likes?: number
    thumbnailUrl: string
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userComment?: UserCommentUncheckedCreateNestedManyWithoutVideoInput
    userLike?: UserLikeUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoCreateOrConnectWithoutUserVideosInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutUserVideosInput, VideoUncheckedCreateWithoutUserVideosInput>
  }

  export type UserUpsertWithoutUserVideosInput = {
    update: XOR<UserUpdateWithoutUserVideosInput, UserUncheckedUpdateWithoutUserVideosInput>
    create: XOR<UserCreateWithoutUserVideosInput, UserUncheckedCreateWithoutUserVideosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserVideosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserVideosInput, UserUncheckedUpdateWithoutUserVideosInput>
  }

  export type UserUpdateWithoutUserVideosInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userComment?: UserCommentUpdateManyWithoutUserNestedInput
    userLike?: UserLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserVideosInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userComment?: UserCommentUncheckedUpdateManyWithoutUserNestedInput
    userLike?: UserLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VideoUpsertWithoutUserVideosInput = {
    update: XOR<VideoUpdateWithoutUserVideosInput, VideoUncheckedUpdateWithoutUserVideosInput>
    create: XOR<VideoCreateWithoutUserVideosInput, VideoUncheckedCreateWithoutUserVideosInput>
    where?: VideoWhereInput
  }

  export type VideoUpdateToOneWithWhereWithoutUserVideosInput = {
    where?: VideoWhereInput
    data: XOR<VideoUpdateWithoutUserVideosInput, VideoUncheckedUpdateWithoutUserVideosInput>
  }

  export type VideoUpdateWithoutUserVideosInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playbackUrl?: StringFieldUpdateOperationsInput | string
    videoPublicId?: StringFieldUpdateOperationsInput | string
    duration?: FloatFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userComment?: UserCommentUpdateManyWithoutVideoNestedInput
    userLike?: UserLikeUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateWithoutUserVideosInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playbackUrl?: StringFieldUpdateOperationsInput | string
    videoPublicId?: StringFieldUpdateOperationsInput | string
    duration?: FloatFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userComment?: UserCommentUncheckedUpdateManyWithoutVideoNestedInput
    userLike?: UserLikeUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type UserCommentCreateWithoutCommentInput = {
    user: UserCreateNestedOneWithoutUserCommentInput
    video: VideoCreateNestedOneWithoutUserCommentInput
  }

  export type UserCommentUncheckedCreateWithoutCommentInput = {
    id?: number
    userId: number
    videoId: number
  }

  export type UserCommentCreateOrConnectWithoutCommentInput = {
    where: UserCommentWhereUniqueInput
    create: XOR<UserCommentCreateWithoutCommentInput, UserCommentUncheckedCreateWithoutCommentInput>
  }

  export type UserCommentCreateManyCommentInputEnvelope = {
    data: UserCommentCreateManyCommentInput | UserCommentCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type UserCommentUpsertWithWhereUniqueWithoutCommentInput = {
    where: UserCommentWhereUniqueInput
    update: XOR<UserCommentUpdateWithoutCommentInput, UserCommentUncheckedUpdateWithoutCommentInput>
    create: XOR<UserCommentCreateWithoutCommentInput, UserCommentUncheckedCreateWithoutCommentInput>
  }

  export type UserCommentUpdateWithWhereUniqueWithoutCommentInput = {
    where: UserCommentWhereUniqueInput
    data: XOR<UserCommentUpdateWithoutCommentInput, UserCommentUncheckedUpdateWithoutCommentInput>
  }

  export type UserCommentUpdateManyWithWhereWithoutCommentInput = {
    where: UserCommentScalarWhereInput
    data: XOR<UserCommentUpdateManyMutationInput, UserCommentUncheckedUpdateManyWithoutCommentInput>
  }

  export type UserCreateWithoutUserCommentInput = {
    fullName: string
    email: string
    password: string
    profileUrl?: string | null
    imagePublicId?: string | null
    refreshToken: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoCreateNestedManyWithoutUserInput
    userLike?: UserLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserCommentInput = {
    id?: number
    fullName: string
    email: string
    password: string
    profileUrl?: string | null
    imagePublicId?: string | null
    refreshToken: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoUncheckedCreateNestedManyWithoutUserInput
    userLike?: UserLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserCommentInput, UserUncheckedCreateWithoutUserCommentInput>
  }

  export type VideoCreateWithoutUserCommentInput = {
    title: string
    description: string
    playbackUrl: string
    videoPublicId: string
    duration: number
    views?: number
    likes?: number
    thumbnailUrl: string
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoCreateNestedManyWithoutVideoInput
    userLike?: UserLikeCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateWithoutUserCommentInput = {
    id?: number
    title: string
    description: string
    playbackUrl: string
    videoPublicId: string
    duration: number
    views?: number
    likes?: number
    thumbnailUrl: string
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoUncheckedCreateNestedManyWithoutVideoInput
    userLike?: UserLikeUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoCreateOrConnectWithoutUserCommentInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutUserCommentInput, VideoUncheckedCreateWithoutUserCommentInput>
  }

  export type CommentCreateWithoutUserCommentInput = {
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUncheckedCreateWithoutUserCommentInput = {
    id?: number
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutUserCommentInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserCommentInput, CommentUncheckedCreateWithoutUserCommentInput>
  }

  export type UserUpsertWithoutUserCommentInput = {
    update: XOR<UserUpdateWithoutUserCommentInput, UserUncheckedUpdateWithoutUserCommentInput>
    create: XOR<UserCreateWithoutUserCommentInput, UserUncheckedCreateWithoutUserCommentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserCommentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserCommentInput, UserUncheckedUpdateWithoutUserCommentInput>
  }

  export type UserUpdateWithoutUserCommentInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUpdateManyWithoutUserNestedInput
    userLike?: UserLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUncheckedUpdateManyWithoutUserNestedInput
    userLike?: UserLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VideoUpsertWithoutUserCommentInput = {
    update: XOR<VideoUpdateWithoutUserCommentInput, VideoUncheckedUpdateWithoutUserCommentInput>
    create: XOR<VideoCreateWithoutUserCommentInput, VideoUncheckedCreateWithoutUserCommentInput>
    where?: VideoWhereInput
  }

  export type VideoUpdateToOneWithWhereWithoutUserCommentInput = {
    where?: VideoWhereInput
    data: XOR<VideoUpdateWithoutUserCommentInput, VideoUncheckedUpdateWithoutUserCommentInput>
  }

  export type VideoUpdateWithoutUserCommentInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playbackUrl?: StringFieldUpdateOperationsInput | string
    videoPublicId?: StringFieldUpdateOperationsInput | string
    duration?: FloatFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUpdateManyWithoutVideoNestedInput
    userLike?: UserLikeUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateWithoutUserCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playbackUrl?: StringFieldUpdateOperationsInput | string
    videoPublicId?: StringFieldUpdateOperationsInput | string
    duration?: FloatFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUncheckedUpdateManyWithoutVideoNestedInput
    userLike?: UserLikeUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type CommentUpsertWithoutUserCommentInput = {
    update: XOR<CommentUpdateWithoutUserCommentInput, CommentUncheckedUpdateWithoutUserCommentInput>
    create: XOR<CommentCreateWithoutUserCommentInput, CommentUncheckedCreateWithoutUserCommentInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutUserCommentInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutUserCommentInput, CommentUncheckedUpdateWithoutUserCommentInput>
  }

  export type CommentUpdateWithoutUserCommentInput = {
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateWithoutUserCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutUserLikeInput = {
    fullName: string
    email: string
    password: string
    profileUrl?: string | null
    imagePublicId?: string | null
    refreshToken: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoCreateNestedManyWithoutUserInput
    userComment?: UserCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserLikeInput = {
    id?: number
    fullName: string
    email: string
    password: string
    profileUrl?: string | null
    imagePublicId?: string | null
    refreshToken: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoUncheckedCreateNestedManyWithoutUserInput
    userComment?: UserCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserLikeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserLikeInput, UserUncheckedCreateWithoutUserLikeInput>
  }

  export type VideoCreateWithoutUserLikeInput = {
    title: string
    description: string
    playbackUrl: string
    videoPublicId: string
    duration: number
    views?: number
    likes?: number
    thumbnailUrl: string
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoCreateNestedManyWithoutVideoInput
    userComment?: UserCommentCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateWithoutUserLikeInput = {
    id?: number
    title: string
    description: string
    playbackUrl: string
    videoPublicId: string
    duration: number
    views?: number
    likes?: number
    thumbnailUrl: string
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userVideos?: UserVideoUncheckedCreateNestedManyWithoutVideoInput
    userComment?: UserCommentUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoCreateOrConnectWithoutUserLikeInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutUserLikeInput, VideoUncheckedCreateWithoutUserLikeInput>
  }

  export type UserUpsertWithoutUserLikeInput = {
    update: XOR<UserUpdateWithoutUserLikeInput, UserUncheckedUpdateWithoutUserLikeInput>
    create: XOR<UserCreateWithoutUserLikeInput, UserUncheckedCreateWithoutUserLikeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserLikeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserLikeInput, UserUncheckedUpdateWithoutUserLikeInput>
  }

  export type UserUpdateWithoutUserLikeInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUpdateManyWithoutUserNestedInput
    userComment?: UserCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserLikeInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUncheckedUpdateManyWithoutUserNestedInput
    userComment?: UserCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VideoUpsertWithoutUserLikeInput = {
    update: XOR<VideoUpdateWithoutUserLikeInput, VideoUncheckedUpdateWithoutUserLikeInput>
    create: XOR<VideoCreateWithoutUserLikeInput, VideoUncheckedCreateWithoutUserLikeInput>
    where?: VideoWhereInput
  }

  export type VideoUpdateToOneWithWhereWithoutUserLikeInput = {
    where?: VideoWhereInput
    data: XOR<VideoUpdateWithoutUserLikeInput, VideoUncheckedUpdateWithoutUserLikeInput>
  }

  export type VideoUpdateWithoutUserLikeInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playbackUrl?: StringFieldUpdateOperationsInput | string
    videoPublicId?: StringFieldUpdateOperationsInput | string
    duration?: FloatFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUpdateManyWithoutVideoNestedInput
    userComment?: UserCommentUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateWithoutUserLikeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playbackUrl?: StringFieldUpdateOperationsInput | string
    videoPublicId?: StringFieldUpdateOperationsInput | string
    duration?: FloatFieldUpdateOperationsInput | number
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userVideos?: UserVideoUncheckedUpdateManyWithoutVideoNestedInput
    userComment?: UserCommentUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type UserVideoCreateManyUserInput = {
    id?: number
    videoId: number
  }

  export type UserCommentCreateManyUserInput = {
    id?: number
    videoId: number
    commentId: number
  }

  export type UserLikeCreateManyUserInput = {
    id?: number
    videoId: number
  }

  export type UserVideoUpdateWithoutUserInput = {
    video?: VideoUpdateOneRequiredWithoutUserVideosNestedInput
  }

  export type UserVideoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
  }

  export type UserVideoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCommentUpdateWithoutUserInput = {
    video?: VideoUpdateOneRequiredWithoutUserCommentNestedInput
    comment?: CommentUpdateOneRequiredWithoutUserCommentNestedInput
  }

  export type UserCommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikeUpdateWithoutUserInput = {
    video?: VideoUpdateOneRequiredWithoutUserLikeNestedInput
  }

  export type UserLikeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
  }

  export type UserVideoCreateManyVideoInput = {
    id?: number
    userId: number
  }

  export type UserCommentCreateManyVideoInput = {
    id?: number
    userId: number
    commentId: number
  }

  export type UserLikeCreateManyVideoInput = {
    id?: number
    userId: number
  }

  export type UserVideoUpdateWithoutVideoInput = {
    user?: UserUpdateOneRequiredWithoutUserVideosNestedInput
  }

  export type UserVideoUncheckedUpdateWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserVideoUncheckedUpdateManyWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCommentUpdateWithoutVideoInput = {
    user?: UserUpdateOneRequiredWithoutUserCommentNestedInput
    comment?: CommentUpdateOneRequiredWithoutUserCommentNestedInput
  }

  export type UserCommentUncheckedUpdateWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCommentUncheckedUpdateManyWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikeUpdateWithoutVideoInput = {
    user?: UserUpdateOneRequiredWithoutUserLikeNestedInput
  }

  export type UserLikeUncheckedUpdateWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikeUncheckedUpdateManyWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCommentCreateManyCommentInput = {
    id?: number
    userId: number
    videoId: number
  }

  export type UserCommentUpdateWithoutCommentInput = {
    user?: UserUpdateOneRequiredWithoutUserCommentNestedInput
    video?: VideoUpdateOneRequiredWithoutUserCommentNestedInput
  }

  export type UserCommentUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCommentUncheckedUpdateManyWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VideoCountOutputTypeDefaultArgs instead
     */
    export type VideoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VideoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentCountOutputTypeDefaultArgs instead
     */
    export type CommentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VideoDefaultArgs instead
     */
    export type VideoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VideoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserVideoDefaultArgs instead
     */
    export type UserVideoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserVideoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCommentDefaultArgs instead
     */
    export type UserCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserLikeDefaultArgs instead
     */
    export type UserLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserLikeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}